
Euro2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d78  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800717c  0800717c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007184  08007184  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007184  08007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf0  2000006c  080071fc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d5c  080071fc  00020d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000147e1  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a3a  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00037300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be3  00000000  00000000  00038228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c91  00000000  00000000  00038e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119ab  00000000  00000000  0005ba9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6451  00000000  00000000  0006d447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043c8  00000000  00000000  00143898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00147c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006f24 	.word	0x08006f24

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000070 	.word	0x20000070
 8000200:	08006f24 	.word	0x08006f24

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b970 	b.w	800050c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	460f      	mov	r7, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4694      	mov	ip, r2
 8000258:	d965      	bls.n	8000326 <__udivmoddi4+0xe2>
 800025a:	fab2 f382 	clz	r3, r2
 800025e:	b143      	cbz	r3, 8000272 <__udivmoddi4+0x2e>
 8000260:	fa02 fc03 	lsl.w	ip, r2, r3
 8000264:	f1c3 0220 	rsb	r2, r3, #32
 8000268:	409f      	lsls	r7, r3
 800026a:	fa20 f202 	lsr.w	r2, r0, r2
 800026e:	4317      	orrs	r7, r2
 8000270:	409c      	lsls	r4, r3
 8000272:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000276:	fa1f f58c 	uxth.w	r5, ip
 800027a:	fbb7 f1fe 	udiv	r1, r7, lr
 800027e:	0c22      	lsrs	r2, r4, #16
 8000280:	fb0e 7711 	mls	r7, lr, r1, r7
 8000284:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000288:	fb01 f005 	mul.w	r0, r1, r5
 800028c:	4290      	cmp	r0, r2
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000290:	eb1c 0202 	adds.w	r2, ip, r2
 8000294:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000298:	f080 811c 	bcs.w	80004d4 <__udivmoddi4+0x290>
 800029c:	4290      	cmp	r0, r2
 800029e:	f240 8119 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002a2:	3902      	subs	r1, #2
 80002a4:	4462      	add	r2, ip
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	b2a4      	uxth	r4, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b6:	fb00 f505 	mul.w	r5, r0, r5
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x90>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x294>
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x294>
 80002d0:	4464      	add	r4, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	2100      	movs	r1, #0
 80002dc:	b11e      	cbz	r6, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40dc      	lsrs	r4, r3
 80002e0:	2300      	movs	r3, #0
 80002e2:	e9c6 4300 	strd	r4, r3, [r6]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0xbc>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80ed 	beq.w	80004ce <__udivmoddi4+0x28a>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e9c6 0500 	strd	r0, r5, [r6]
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	d149      	bne.n	800039c <__udivmoddi4+0x158>
 8000308:	42ab      	cmp	r3, r5
 800030a:	d302      	bcc.n	8000312 <__udivmoddi4+0xce>
 800030c:	4282      	cmp	r2, r0
 800030e:	f200 80f8 	bhi.w	8000502 <__udivmoddi4+0x2be>
 8000312:	1a84      	subs	r4, r0, r2
 8000314:	eb65 0203 	sbc.w	r2, r5, r3
 8000318:	2001      	movs	r0, #1
 800031a:	4617      	mov	r7, r2
 800031c:	2e00      	cmp	r6, #0
 800031e:	d0e2      	beq.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	e9c6 4700 	strd	r4, r7, [r6]
 8000324:	e7df      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xe6>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f382 	clz	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x210>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2101      	movs	r1, #1
 8000340:	fbb2 f5f7 	udiv	r5, r2, r7
 8000344:	fb07 2015 	mls	r0, r7, r5, r2
 8000348:	0c22      	lsrs	r2, r4, #16
 800034a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034e:	fb0e f005 	mul.w	r0, lr, r5
 8000352:	4290      	cmp	r0, r2
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x124>
 8000356:	eb1c 0202 	adds.w	r2, ip, r2
 800035a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4290      	cmp	r0, r2
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2b8>
 8000366:	4645      	mov	r5, r8
 8000368:	1a12      	subs	r2, r2, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000370:	fb07 2210 	mls	r2, r7, r0, r2
 8000374:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x14e>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x14c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2c2>
 8000390:	4610      	mov	r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x98>
 800039c:	f1c1 0720 	rsb	r7, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa05 f401 	lsl.w	r4, r5, r1
 80003ae:	fa20 f307 	lsr.w	r3, r0, r7
 80003b2:	40fd      	lsrs	r5, r7
 80003b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 5518 	mls	r5, r9, r8, r5
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003cc:	fb08 f50e 	mul.w	r5, r8, lr
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	fa00 f001 	lsl.w	r0, r0, r1
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2b4>
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2b4>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	b29d      	uxth	r5, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2ac>
 8000416:	45a6      	cmp	lr, r4
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2ac>
 800041a:	3b02      	subs	r3, #2
 800041c:	4464      	add	r4, ip
 800041e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000422:	fba3 9502 	umull	r9, r5, r3, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	42ac      	cmp	r4, r5
 800042c:	46c8      	mov	r8, r9
 800042e:	46ae      	mov	lr, r5
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x29c>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x298>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x208>
 8000436:	ebb0 0208 	subs.w	r2, r0, r8
 800043a:	eb64 040e 	sbc.w	r4, r4, lr
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40ca      	lsrs	r2, r1
 8000444:	40cc      	lsrs	r4, r1
 8000446:	4317      	orrs	r7, r2
 8000448:	e9c6 7400 	strd	r7, r4, [r6]
 800044c:	4618      	mov	r0, r3
 800044e:	2100      	movs	r1, #0
 8000450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000454:	f1c3 0120 	rsb	r1, r3, #32
 8000458:	fa02 fc03 	lsl.w	ip, r2, r3
 800045c:	fa20 f201 	lsr.w	r2, r0, r1
 8000460:	fa25 f101 	lsr.w	r1, r5, r1
 8000464:	409d      	lsls	r5, r3
 8000466:	432a      	orrs	r2, r5
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1510 	mls	r5, r7, r0, r1
 8000478:	0c11      	lsrs	r1, r2, #16
 800047a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047e:	fb00 f50e 	mul.w	r5, r0, lr
 8000482:	428d      	cmp	r5, r1
 8000484:	fa04 f403 	lsl.w	r4, r4, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x258>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 8000494:	428d      	cmp	r5, r1
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 8000498:	3802      	subs	r0, #2
 800049a:	4461      	add	r1, ip
 800049c:	1b49      	subs	r1, r1, r5
 800049e:	b292      	uxth	r2, r2
 80004a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a4:	fb07 1115 	mls	r1, r7, r5, r1
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	fb05 f10e 	mul.w	r1, r5, lr
 80004b0:	4291      	cmp	r1, r2
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x282>
 80004b4:	eb1c 0202 	adds.w	r2, ip, r2
 80004b8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 80004be:	4291      	cmp	r1, r2
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2a8>
 80004c2:	3d02      	subs	r5, #2
 80004c4:	4462      	add	r2, ip
 80004c6:	1a52      	subs	r2, r2, r1
 80004c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0xfc>
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xa2>
 80004d4:	4639      	mov	r1, r7
 80004d6:	e6e6      	b.n	80002a6 <__udivmoddi4+0x62>
 80004d8:	4610      	mov	r0, r2
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x90>
 80004dc:	4548      	cmp	r0, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e8:	3b01      	subs	r3, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ec:	4645      	mov	r5, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x282>
 80004f0:	462b      	mov	r3, r5
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1da>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x258>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fc:	3d02      	subs	r5, #2
 80004fe:	4462      	add	r2, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x124>
 8000502:	4608      	mov	r0, r1
 8000504:	e70a      	b.n	800031c <__udivmoddi4+0xd8>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x14e>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	0a5a      	lsrs	r2, r3, #9
 8000520:	490f      	ldr	r1, [pc, #60]	; (8000560 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000522:	fba1 1202 	umull	r1, r2, r1, r2
 8000526:	09d2      	lsrs	r2, r2, #7
 8000528:	490e      	ldr	r1, [pc, #56]	; (8000564 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800052a:	fb01 f202 	mul.w	r2, r1, r2
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	0a5b      	lsrs	r3, r3, #9
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800053a:	fba2 2303 	umull	r2, r3, r2, r3
 800053e:	09db      	lsrs	r3, r3, #7
 8000540:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	441a      	add	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	601a      	str	r2, [r3, #0]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	00044b83 	.word	0x00044b83
 8000564:	3b9aca00 	.word	0x3b9aca00

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f002 fb9e 	bl	8002cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f814 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 fa7e 	bl	8000a74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000578:	f000 fa54 	bl	8000a24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800057c:	f000 fa28 	bl	80009d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000580:	f000 f87a 	bl	8000678 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000584:	f000 f946 	bl	8000814 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000588:	f000 f998 	bl	80008bc <MX_TIM4_Init>
  MX_TIM7_Init();
 800058c:	f000 f9ea 	bl	8000964 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  setup();
 8000590:	f001 fdf0 	bl	8002174 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  loop();
 8000594:	f001 fdfe 	bl	8002194 <loop>
 8000598:	e7fc      	b.n	8000594 <main+0x2c>
	...

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	2234      	movs	r2, #52	; 0x34
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 fb67 	bl	8006c7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <SystemClock_Config+0xd4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a29      	ldr	r2, [pc, #164]	; (8000670 <SystemClock_Config+0xd4>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <SystemClock_Config+0xd4>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <SystemClock_Config+0xd8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e8:	4a22      	ldr	r2, [pc, #136]	; (8000674 <SystemClock_Config+0xd8>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <SystemClock_Config+0xd8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000610:	2310      	movs	r3, #16
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000614:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000618:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061a:	2304      	movs	r3, #4
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fdfa 	bl	8004224 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000636:	f000 fa5f 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fa9a 	bl	8003b90 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000662:	f000 fa49 	bl	8000af8 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	; 0x58
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2220      	movs	r2, #32
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 fae4 	bl	8006c7e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b6:	4b55      	ldr	r3, [pc, #340]	; (800080c <MX_TIM1_Init+0x194>)
 80006b8:	4a55      	ldr	r2, [pc, #340]	; (8000810 <MX_TIM1_Init+0x198>)
 80006ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006bc:	4b53      	ldr	r3, [pc, #332]	; (800080c <MX_TIM1_Init+0x194>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b52      	ldr	r3, [pc, #328]	; (800080c <MX_TIM1_Init+0x194>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4500;
 80006c8:	4b50      	ldr	r3, [pc, #320]	; (800080c <MX_TIM1_Init+0x194>)
 80006ca:	f241 1294 	movw	r2, #4500	; 0x1194
 80006ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b4e      	ldr	r3, [pc, #312]	; (800080c <MX_TIM1_Init+0x194>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006d6:	4b4d      	ldr	r3, [pc, #308]	; (800080c <MX_TIM1_Init+0x194>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006dc:	4b4b      	ldr	r3, [pc, #300]	; (800080c <MX_TIM1_Init+0x194>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006e2:	484a      	ldr	r0, [pc, #296]	; (800080c <MX_TIM1_Init+0x194>)
 80006e4:	f004 f83c 	bl	8004760 <HAL_TIM_Base_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80006ee:	f000 fa03 	bl	8000af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006fc:	4619      	mov	r1, r3
 80006fe:	4843      	ldr	r0, [pc, #268]	; (800080c <MX_TIM1_Init+0x194>)
 8000700:	f004 fbe4 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800070a:	f000 f9f5 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800070e:	483f      	ldr	r0, [pc, #252]	; (800080c <MX_TIM1_Init+0x194>)
 8000710:	f004 f8ce 	bl	80048b0 <HAL_TIM_PWM_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800071a:	f000 f9ed 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800071e:	483b      	ldr	r0, [pc, #236]	; (800080c <MX_TIM1_Init+0x194>)
 8000720:	f004 f86d 	bl	80047fe <HAL_TIM_OC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800072a:	f000 f9e5 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800073a:	4619      	mov	r1, r3
 800073c:	4833      	ldr	r0, [pc, #204]	; (800080c <MX_TIM1_Init+0x194>)
 800073e:	f004 ffb5 	bl	80056ac <HAL_TIMEx_MasterConfigSynchronization>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000748:	f000 f9d6 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074c:	2360      	movs	r3, #96	; 0x60
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000754:	2300      	movs	r3, #0
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000758:	2300      	movs	r3, #0
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	2200      	movs	r2, #0
 800076e:	4619      	mov	r1, r3
 8000770:	4826      	ldr	r0, [pc, #152]	; (800080c <MX_TIM1_Init+0x194>)
 8000772:	f004 fae9 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800077c:	f000 f9bc 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000784:	2204      	movs	r2, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4820      	ldr	r0, [pc, #128]	; (800080c <MX_TIM1_Init+0x194>)
 800078a:	f004 fadd 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000794:	f000 f9b0 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800079c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a0:	2208      	movs	r2, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	4819      	ldr	r0, [pc, #100]	; (800080c <MX_TIM1_Init+0x194>)
 80007a6:	f004 fa73 	bl	8004c90 <HAL_TIM_OC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80007b0:	f000 f9a2 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	220c      	movs	r2, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_TIM1_Init+0x194>)
 80007be:	f004 fa67 	bl	8004c90 <HAL_TIM_OC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 80007c8:	f000 f996 	bl	8000af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4807      	ldr	r0, [pc, #28]	; (800080c <MX_TIM1_Init+0x194>)
 80007f0:	f004 ffd8 	bl	80057a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 80007fa:	f000 f97d 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007fe:	4803      	ldr	r0, [pc, #12]	; (800080c <MX_TIM1_Init+0x194>)
 8000800:	f000 fa64 	bl	8000ccc <HAL_TIM_MspPostInit>

}
 8000804:	bf00      	nop
 8000806:	3758      	adds	r7, #88	; 0x58
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000088 	.word	0x20000088
 8000810:	40010000 	.word	0x40010000

08000814 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2224      	movs	r2, #36	; 0x24
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f006 fa2b 	bl	8006c7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_TIM3_Init+0xa0>)
 8000832:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <MX_TIM3_Init+0xa4>)
 8000834:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_TIM3_Init+0xa0>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_TIM3_Init+0xa0>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_TIM3_Init+0xa0>)
 8000844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000848:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_TIM3_Init+0xa0>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_TIM3_Init+0xa0>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000856:	2303      	movs	r3, #3
 8000858:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800086e:	2301      	movs	r3, #1
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MX_TIM3_Init+0xa0>)
 8000882:	f004 f86e 	bl	8004962 <HAL_TIM_Encoder_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800088c:	f000 f934 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_TIM3_Init+0xa0>)
 800089e:	f004 ff05 	bl	80056ac <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80008a8:	f000 f926 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3730      	adds	r7, #48	; 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000d0 	.word	0x200000d0
 80008b8:	40000400 	.word	0x40000400

080008bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2224      	movs	r2, #36	; 0x24
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f006 f9d7 	bl	8006c7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_TIM4_Init+0xa0>)
 80008da:	4a21      	ldr	r2, [pc, #132]	; (8000960 <MX_TIM4_Init+0xa4>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_TIM4_Init+0xa0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_TIM4_Init+0xa0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_TIM4_Init+0xa0>)
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_TIM4_Init+0xa0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_TIM4_Init+0xa0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008fe:	2303      	movs	r3, #3
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000906:	2301      	movs	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000916:	2301      	movs	r3, #1
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_TIM4_Init+0xa0>)
 800092a:	f004 f81a 	bl	8004962 <HAL_TIM_Encoder_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000934:	f000 f8e0 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_TIM4_Init+0xa0>)
 8000946:	f004 feb1 	bl	80056ac <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000950:	f000 f8d2 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000118 	.word	0x20000118
 8000960:	40000800 	.word	0x40000800

08000964 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_TIM7_Init+0x64>)
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MX_TIM7_Init+0x68>)
 8000976:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_TIM7_Init+0x64>)
 800097a:	2253      	movs	r2, #83	; 0x53
 800097c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_TIM7_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_TIM7_Init+0x64>)
 8000986:	f240 32e7 	movw	r2, #999	; 0x3e7
 800098a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_TIM7_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_TIM7_Init+0x64>)
 8000994:	f003 fee4 	bl	8004760 <HAL_TIM_Base_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800099e:	f000 f8ab 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_TIM7_Init+0x64>)
 80009b0:	f004 fe7c 	bl	80056ac <HAL_TIMEx_MasterConfigSynchronization>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80009ba:	f000 f89d 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000160 	.word	0x20000160
 80009cc:	40001400 	.word	0x40001400

080009d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_USART2_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009dc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80009e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART2_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART2_UART_Init+0x4c>)
 8000a08:	f004 ff32 	bl	8005870 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a12:	f000 f871 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200001a8 	.word	0x200001a8
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_DMA_Init+0x4c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <MX_DMA_Init+0x4c>)
 8000a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <MX_DMA_Init+0x4c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2010      	movs	r0, #16
 8000a4c:	f002 fa9f 	bl	8002f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a50:	2010      	movs	r0, #16
 8000a52:	f002 fab8 	bl	8002fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2011      	movs	r0, #17
 8000a5c:	f002 fa97 	bl	8002f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a60:	2011      	movs	r0, #17
 8000a62:	f002 fab0 	bl	8002fc6 <HAL_NVIC_EnableIRQ>

}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_GPIO_Init+0x7c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <MX_GPIO_Init+0x7c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_GPIO_Init+0x7c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_GPIO_Init+0x7c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <MX_GPIO_Init+0x7c>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_GPIO_Init+0x7c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	480b      	ldr	r0, [pc, #44]	; (8000af4 <MX_GPIO_Init+0x80>)
 8000ac8:	f003 f82e 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000acc:	2320      	movs	r3, #32
 8000ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_GPIO_Init+0x80>)
 8000ae4:	f002 fe8c 	bl	8003800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f002 fa18 	bl	8002f78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <HAL_TIM_Base_MspInit+0x70>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d10e      	bne.n	8000b84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_TIM_Base_MspInit+0x74>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <HAL_TIM_Base_MspInit+0x74>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_TIM_Base_MspInit+0x74>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000b82:	e01a      	b.n	8000bba <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_TIM_Base_MspInit+0x78>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d115      	bne.n	8000bba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_TIM_Base_MspInit+0x74>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <HAL_TIM_Base_MspInit+0x74>)
 8000b98:	f043 0320 	orr.w	r3, r3, #32
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_TIM_Base_MspInit+0x74>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 0320 	and.w	r3, r3, #32
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2037      	movs	r0, #55	; 0x37
 8000bb0:	f002 f9ed 	bl	8002f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bb4:	2037      	movs	r0, #55	; 0x37
 8000bb6:	f002 fa06 	bl	8002fc6 <HAL_NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40001400 	.word	0x40001400

08000bd0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a32      	ldr	r2, [pc, #200]	; (8000cb8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12c      	bne.n	8000c4c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a30      	ldr	r2, [pc, #192]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a29      	ldr	r2, [pc, #164]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c2a:	23c0      	movs	r3, #192	; 0xc0
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000c46:	f002 fddb 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c4a:	e030      	b.n	8000cae <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_TIM_Encoder_MspInit+0xec>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c8e:	23c0      	movs	r3, #192	; 0xc0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000caa:	f002 fda9 	bl	8003800 <HAL_GPIO_Init>
}
 8000cae:	bf00      	nop
 8000cb0:	3730      	adds	r7, #48	; 0x30
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40000400 	.word	0x40000400
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40000800 	.word	0x40000800
 8000cc8:	40020400 	.word	0x40020400

08000ccc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <HAL_TIM_MspPostInit+0x68>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d11e      	bne.n	8000d2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_TIM_MspPostInit+0x6c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <HAL_TIM_MspPostInit+0x6c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_TIM_MspPostInit+0x6c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000d0a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <HAL_TIM_MspPostInit+0x70>)
 8000d28:	f002 fd6a 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a4d      	ldr	r2, [pc, #308]	; (8000e94 <HAL_UART_MspInit+0x154>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	f040 8093 	bne.w	8000e8a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <HAL_UART_MspInit+0x158>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a4a      	ldr	r2, [pc, #296]	; (8000e98 <HAL_UART_MspInit+0x158>)
 8000d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b48      	ldr	r3, [pc, #288]	; (8000e98 <HAL_UART_MspInit+0x158>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <HAL_UART_MspInit+0x158>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a43      	ldr	r2, [pc, #268]	; (8000e98 <HAL_UART_MspInit+0x158>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <HAL_UART_MspInit+0x158>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dac:	2307      	movs	r3, #7
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4839      	ldr	r0, [pc, #228]	; (8000e9c <HAL_UART_MspInit+0x15c>)
 8000db8:	f002 fd22 	bl	8003800 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000dbc:	4b38      	ldr	r3, [pc, #224]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000dbe:	4a39      	ldr	r2, [pc, #228]	; (8000ea4 <HAL_UART_MspInit+0x164>)
 8000dc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000dc2:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000dc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dca:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd0:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd6:	4b32      	ldr	r3, [pc, #200]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ddc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dde:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000dea:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000df0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000df2:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000df8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e00:	4827      	ldr	r0, [pc, #156]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000e02:	f002 f8fb 	bl	8002ffc <HAL_DMA_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000e0c:	f7ff fe74 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000e14:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e16:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <HAL_UART_MspInit+0x160>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e1e:	4a23      	ldr	r2, [pc, #140]	; (8000eac <HAL_UART_MspInit+0x16c>)
 8000e20:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e28:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e2c:	2240      	movs	r2, #64	; 0x40
 8000e2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e56:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e5e:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e60:	f002 f8cc 	bl	8002ffc <HAL_DMA_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8000e6a:	f7ff fe45 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e72:	639a      	str	r2, [r3, #56]	; 0x38
 8000e74:	4a0c      	ldr	r2, [pc, #48]	; (8000ea8 <HAL_UART_MspInit+0x168>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2026      	movs	r0, #38	; 0x26
 8000e80:	f002 f885 	bl	8002f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e84:	2026      	movs	r0, #38	; 0x26
 8000e86:	f002 f89e 	bl	8002fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	200001f0 	.word	0x200001f0
 8000ea4:	40026088 	.word	0x40026088
 8000ea8:	20000250 	.word	0x20000250
 8000eac:	400260a0 	.word	0x400260a0

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f001 ff28 	bl	8002d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <DMA1_Stream5_IRQHandler+0x10>)
 8000f0a:	f002 fa0f 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001f0 	.word	0x200001f0

08000f18 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <DMA1_Stream6_IRQHandler+0x10>)
 8000f1e:	f002 fa05 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000250 	.word	0x20000250

08000f2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <USART2_IRQHandler+0x10>)
 8000f32:	f004 fd83 	bl	8005a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001a8 	.word	0x200001a8

08000f40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <TIM7_IRQHandler+0x10>)
 8000f46:	f003 fdb2 	bl	8004aae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000160 	.word	0x20000160

08000f54 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <_ZN3ros3MsgC1Ev+0x1c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	0800714c 	.word	0x0800714c

08000f98 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
      data()
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ffe8 	bl	8000f78 <_ZN3ros3MsgC1Ev>
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ffce 	bl	8000f54 <_ZN3ros4TimeC1Ev>
    {
    }
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	08007134 	.word	0x08007134

08000fc8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6859      	ldr	r1, [r3, #4]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	0a19      	lsrs	r1, r3, #8
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3301      	adds	r3, #1
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2ca      	uxtb	r2, r1
 8000ff4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	0c19      	lsrs	r1, r3, #16
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3302      	adds	r3, #2
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	b2ca      	uxtb	r2, r1
 8001006:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	0e19      	lsrs	r1, r3, #24
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3303      	adds	r3, #3
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	b2ca      	uxtb	r2, r1
 8001018:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3304      	adds	r3, #4
 800101e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6899      	ldr	r1, [r3, #8]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	b2ca      	uxtb	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	0a19      	lsrs	r1, r3, #8
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4413      	add	r3, r2
 800103c:	b2ca      	uxtb	r2, r1
 800103e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	0c19      	lsrs	r1, r3, #16
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3302      	adds	r3, #2
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	4413      	add	r3, r2
 800104e:	b2ca      	uxtb	r2, r1
 8001050:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	0e19      	lsrs	r1, r3, #24
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3303      	adds	r3, #3
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	4413      	add	r3, r2
 8001060:	b2ca      	uxtb	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3304      	adds	r3, #4
 8001068:	60fb      	str	r3, [r7, #12]
      return offset;
 800106a:	68fb      	ldr	r3, [r7, #12]
    }
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3301      	adds	r3, #1
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	440b      	add	r3, r1
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3302      	adds	r3, #2
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	440b      	add	r3, r1
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	041b      	lsls	r3, r3, #16
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3303      	adds	r3, #3
 80010c8:	6839      	ldr	r1, [r7, #0]
 80010ca:	440b      	add	r3, r1
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	061b      	lsls	r3, r3, #24
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3304      	adds	r3, #4
 80010da:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3301      	adds	r3, #1
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	440b      	add	r3, r1
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3302      	adds	r3, #2
 8001108:	6839      	ldr	r1, [r7, #0]
 800110a:	440b      	add	r3, r1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	041b      	lsls	r3, r3, #16
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3303      	adds	r3, #3
 800111e:	6839      	ldr	r1, [r7, #0]
 8001120:	440b      	add	r3, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	061b      	lsls	r3, r3, #24
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3304      	adds	r3, #4
 8001130:	60fb      	str	r3, [r7, #12]
     return offset;
 8001132:	68fb      	ldr	r3, [r7, #12]
    }
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	08006f3c 	.word	0x08006f3c

0800115c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	08006f4c 	.word	0x08006f4c

08001178 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fef8 	bl	8000f78 <_ZN3ros3MsgC1Ev>
 8001188:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001198:	609a      	str	r2, [r3, #8]
      message_type(""),
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800119e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a06      	ldr	r2, [pc, #24]	; (80011bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80011a4:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
    {
    }
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	0800711c 	.word	0x0800711c
 80011bc:	08006f70 	.word	0x08006f70

080011c0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	8899      	ldrh	r1, [r3, #4]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	b2ca      	uxtb	r2, r1
 80011da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	889b      	ldrh	r3, [r3, #4]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	b299      	uxth	r1, r3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3301      	adds	r3, #1
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	b2ca      	uxtb	r2, r1
 80011ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	3302      	adds	r3, #2
 80011f4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f802 	bl	8000204 <strlen>
 8001200:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4413      	add	r3, r2
 8001208:	69b9      	ldr	r1, [r7, #24]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 ffe2 	bl	80021d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	3304      	adds	r3, #4
 8001214:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	18d0      	adds	r0, r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4619      	mov	r1, r3
 8001224:	f005 fd60 	bl	8006ce8 <memcpy>
      offset += length_topic_name;
 8001228:	69fa      	ldr	r2, [r7, #28]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4413      	add	r3, r2
 800122e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	4618      	mov	r0, r3
 8001236:	f7fe ffe5 	bl	8000204 <strlen>
 800123a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	4413      	add	r3, r2
 8001242:	6979      	ldr	r1, [r7, #20]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 ffc5 	bl	80021d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	18d0      	adds	r0, r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4619      	mov	r1, r3
 800125e:	f005 fd43 	bl	8006ce8 <memcpy>
      offset += length_message_type;
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	4413      	add	r3, r2
 8001268:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	4618      	mov	r0, r3
 8001270:	f7fe ffc8 	bl	8000204 <strlen>
 8001274:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	4413      	add	r3, r2
 800127c:	6939      	ldr	r1, [r7, #16]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 ffa8 	bl	80021d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	3304      	adds	r3, #4
 8001288:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	18d0      	adds	r0, r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4619      	mov	r1, r3
 8001298:	f005 fd26 	bl	8006ce8 <memcpy>
      offset += length_md5sum;
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4413      	add	r3, r2
 80012a2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80012aa:	68f9      	ldr	r1, [r7, #12]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	b2ca      	uxtb	r2, r1
 80012b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	0a19      	lsrs	r1, r3, #8
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	b2ca      	uxtb	r2, r1
 80012c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	0c19      	lsrs	r1, r3, #16
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3302      	adds	r3, #2
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	0e19      	lsrs	r1, r3, #24
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3303      	adds	r3, #3
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2ca      	uxtb	r2, r1
 80012e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	61fb      	str	r3, [r7, #28]
      return offset;
 80012ec:	69fb      	ldr	r3, [r7, #28]
    }
 80012ee:	4618      	mov	r0, r3
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b08a      	sub	sp, #40	; 0x28
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b29a      	uxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	889b      	ldrh	r3, [r3, #4]
 8001316:	b21a      	sxth	r2, r3
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	3301      	adds	r3, #1
 800131c:	6839      	ldr	r1, [r7, #0]
 800131e:	440b      	add	r3, r1
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21b      	sxth	r3, r3
 800132a:	b29a      	uxth	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	3302      	adds	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	441a      	add	r2, r3
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f000 ff65 	bl	8002212 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	3304      	adds	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
 8001352:	e00b      	b.n	800136c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	441a      	add	r2, r3
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3b01      	subs	r3, #1
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	440b      	add	r3, r1
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	3301      	adds	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	4413      	add	r3, r2
 8001372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001374:	429a      	cmp	r2, r3
 8001376:	d3ed      	bcc.n	8001354 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	4413      	add	r3, r2
 800137e:	3b01      	subs	r3, #1
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	4413      	add	r3, r2
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	3b01      	subs	r3, #1
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	441a      	add	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	4413      	add	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	441a      	add	r2, r3
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 ff32 	bl	8002212 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	3304      	adds	r3, #4
 80013b2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	623b      	str	r3, [r7, #32]
 80013b8:	e00b      	b.n	80013d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	441a      	add	r2, r3
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	440b      	add	r3, r1
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	3301      	adds	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4413      	add	r3, r2
 80013d8:	6a3a      	ldr	r2, [r7, #32]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3ed      	bcc.n	80013ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4413      	add	r3, r2
 80013e4:	3b01      	subs	r3, #1
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	441a      	add	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4413      	add	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	441a      	add	r2, r3
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f000 feff 	bl	8002212 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	3304      	adds	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e00b      	b.n	8001438 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	441a      	add	r2, r3
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b01      	subs	r3, #1
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	440b      	add	r3, r1
 800142e:	7812      	ldrb	r2, [r2, #0]
 8001430:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	429a      	cmp	r2, r3
 8001442:	d3ed      	bcc.n	8001420 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4413      	add	r3, r2
 800144a:	3b01      	subs	r3, #1
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	4413      	add	r3, r2
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	3b01      	subs	r3, #1
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	441a      	add	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	6839      	ldr	r1, [r7, #0]
 8001472:	440a      	add	r2, r1
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	4313      	orrs	r3, r2
 8001478:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	3301      	adds	r3, #1
 8001480:	6839      	ldr	r1, [r7, #0]
 8001482:	440b      	add	r3, r1
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	4313      	orrs	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	3302      	adds	r3, #2
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	440b      	add	r3, r1
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	4313      	orrs	r3, r2
 800149c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	3303      	adds	r3, #3
 80014a4:	6839      	ldr	r1, [r7, #0]
 80014a6:	440b      	add	r3, r1
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	061b      	lsls	r3, r3, #24
 80014ac:	4313      	orrs	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	3304      	adds	r3, #4
 80014ba:	61bb      	str	r3, [r7, #24]
     return offset;
 80014bc:	69bb      	ldr	r3, [r7, #24]
    }
 80014be:	4618      	mov	r0, r3
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	08006f74 	.word	0x08006f74

080014e4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	08006f90 	.word	0x08006f90

08001500 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fd34 	bl	8000f78 <_ZN3ros3MsgC1Ev>
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
      level(0),
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	711a      	strb	r2, [r3, #4]
      msg("")
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001520:	609a      	str	r2, [r3, #8]
    {
    }
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	08007104 	.word	0x08007104
 8001530:	08006f70 	.word	0x08006f70

08001534 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	4413      	add	r3, r2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	7912      	ldrb	r2, [r2, #4]
 800154c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fe53 	bl	8000204 <strlen>
 800155e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	4413      	add	r3, r2
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fe33 	bl	80021d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3304      	adds	r3, #4
 8001572:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	18d0      	adds	r0, r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	4619      	mov	r1, r3
 8001582:	f005 fbb1 	bl	8006ce8 <memcpy>
      offset += length_msg;
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
      return offset;
 800158e:	68fb      	ldr	r3, [r7, #12]
    }
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	3301      	adds	r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	441a      	add	r2, r3
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fe24 	bl	8002212 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	3304      	adds	r3, #4
 80015ce:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	e00b      	b.n	80015ee <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	441a      	add	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6839      	ldr	r1, [r7, #0]
 80015e2:	440b      	add	r3, r1
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3ed      	bcc.n	80015d6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	3b01      	subs	r3, #1
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	4413      	add	r3, r2
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	3b01      	subs	r3, #1
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	441a      	add	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
     return offset;
 800161e:	693b      	ldr	r3, [r7, #16]
    }
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	08006fb4 	.word	0x08006fb4

08001644 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	08006fc8 	.word	0x08006fc8

08001660 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fc84 	bl	8000f78 <_ZN3ros3MsgC1Ev>
 8001670:	4a11      	ldr	r2, [pc, #68]	; (80016b8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	080070ec 	.word	0x080070ec

080016bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	b2ca      	uxtb	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	0a19      	lsrs	r1, r3, #8
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	3301      	adds	r3, #1
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	0c19      	lsrs	r1, r3, #16
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	3302      	adds	r3, #2
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	b2ca      	uxtb	r2, r1
 80016fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	0e19      	lsrs	r1, r3, #24
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	3303      	adds	r3, #3
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4413      	add	r3, r2
 800170a:	b2ca      	uxtb	r2, r1
 800170c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	3304      	adds	r3, #4
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
 8001718:	e02a      	b.n	8001770 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001728:	6939      	ldr	r1, [r7, #16]
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	4413      	add	r3, r2
 8001730:	b2ca      	uxtb	r2, r1
 8001732:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	0a19      	lsrs	r1, r3, #8
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	3301      	adds	r3, #1
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	b2ca      	uxtb	r2, r1
 8001742:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	0c19      	lsrs	r1, r3, #16
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	3302      	adds	r3, #2
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	4413      	add	r3, r2
 8001750:	b2ca      	uxtb	r2, r1
 8001752:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	0e19      	lsrs	r1, r3, #24
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	3303      	adds	r3, #3
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	4413      	add	r3, r2
 8001760:	b2ca      	uxtb	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	3304      	adds	r3, #4
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	3301      	adds	r3, #1
 800176e:	623b      	str	r3, [r7, #32]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	6a3a      	ldr	r2, [r7, #32]
 8001776:	429a      	cmp	r2, r3
 8001778:	d3cf      	bcc.n	800171a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6919      	ldr	r1, [r3, #16]
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	b2ca      	uxtb	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	0a19      	lsrs	r1, r3, #8
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	3301      	adds	r3, #1
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	b2ca      	uxtb	r2, r1
 8001798:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	0c19      	lsrs	r1, r3, #16
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	3302      	adds	r3, #2
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	b2ca      	uxtb	r2, r1
 80017aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	0e19      	lsrs	r1, r3, #24
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	3303      	adds	r3, #3
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	4413      	add	r3, r2
 80017ba:	b2ca      	uxtb	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	3304      	adds	r3, #4
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	e02a      	b.n	8001820 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699a      	ldr	r2, [r3, #24]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	b2ca      	uxtb	r2, r1
 80017e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	0a19      	lsrs	r1, r3, #8
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	3301      	adds	r3, #1
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	b2ca      	uxtb	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	0c19      	lsrs	r1, r3, #16
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	3302      	adds	r3, #2
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	b2ca      	uxtb	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	0e19      	lsrs	r1, r3, #24
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	3303      	adds	r3, #3
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	4413      	add	r3, r2
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	3304      	adds	r3, #4
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3301      	adds	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	429a      	cmp	r2, r3
 8001828:	d3cf      	bcc.n	80017ca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69d9      	ldr	r1, [r3, #28]
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4413      	add	r3, r2
 8001834:	b2ca      	uxtb	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	0a19      	lsrs	r1, r3, #8
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	3301      	adds	r3, #1
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	4413      	add	r3, r2
 8001846:	b2ca      	uxtb	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	0c19      	lsrs	r1, r3, #16
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	3302      	adds	r3, #2
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	4413      	add	r3, r2
 8001858:	b2ca      	uxtb	r2, r1
 800185a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	0e19      	lsrs	r1, r3, #24
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	3303      	adds	r3, #3
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	4413      	add	r3, r2
 800186a:	b2ca      	uxtb	r2, r1
 800186c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	3304      	adds	r3, #4
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	e027      	b.n	80018ca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fcbc 	bl	8000204 <strlen>
 800188c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	6979      	ldr	r1, [r7, #20]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fc9c 	bl	80021d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3304      	adds	r3, #4
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	18d0      	adds	r0, r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4619      	mov	r1, r3
 80018b8:	f005 fa16 	bl	8006ce8 <memcpy>
      offset += length_stringsi;
 80018bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	4413      	add	r3, r2
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	3301      	adds	r3, #1
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d3d2      	bcc.n	800187a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80018d6:	4618      	mov	r0, r3
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80018de:	b580      	push	{r7, lr}
 80018e0:	b08e      	sub	sp, #56	; 0x38
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80018ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80018f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f8:	3301      	adds	r3, #1
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	6a3a      	ldr	r2, [r7, #32]
 8001904:	4313      	orrs	r3, r2
 8001906:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190a:	3302      	adds	r3, #2
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	4413      	add	r3, r2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	041b      	lsls	r3, r3, #16
 8001914:	6a3a      	ldr	r2, [r7, #32]
 8001916:	4313      	orrs	r3, r2
 8001918:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800191a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191c:	3303      	adds	r3, #3
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	6a3a      	ldr	r2, [r7, #32]
 8001928:	4313      	orrs	r3, r2
 800192a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192e:	3304      	adds	r3, #4
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	6a3a      	ldr	r2, [r7, #32]
 8001938:	429a      	cmp	r2, r3
 800193a:	d90a      	bls.n	8001952 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f005 f962 	bl	8006c10 <realloc>
 800194c:	4602      	mov	r2, r0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a3a      	ldr	r2, [r7, #32]
 8001956:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001958:	2300      	movs	r3, #0
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
 800195c:	e035      	b.n	80019ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001966:	6839      	ldr	r1, [r7, #0]
 8001968:	440a      	add	r2, r1
 800196a:	7812      	ldrb	r2, [r2, #0]
 800196c:	4313      	orrs	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001974:	3301      	adds	r3, #1
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	440b      	add	r3, r1
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001986:	3302      	adds	r3, #2
 8001988:	6839      	ldr	r1, [r7, #0]
 800198a:	440b      	add	r3, r1
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001998:	3303      	adds	r3, #3
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	440b      	add	r3, r1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	061b      	lsls	r3, r3, #24
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80019ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ae:	3304      	adds	r3, #4
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80019c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c6:	3301      	adds	r3, #1
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d3c4      	bcc.n	800195e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80019d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80019de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e0:	3301      	adds	r3, #1
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80019f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f2:	3302      	adds	r3, #2
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a04:	3303      	adds	r3, #3
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	3304      	adds	r3, #4
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d90a      	bls.n	8001a3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699a      	ldr	r2, [r3, #24]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f005 f8ee 	bl	8006c10 <realloc>
 8001a34:	4602      	mov	r2, r0
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a40:	2300      	movs	r3, #0
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a44:	e035      	b.n	8001ab2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a4e:	6839      	ldr	r1, [r7, #0]
 8001a50:	440a      	add	r2, r1
 8001a52:	7812      	ldrb	r2, [r2, #0]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	6839      	ldr	r1, [r7, #0]
 8001a60:	440b      	add	r3, r1
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6e:	3302      	adds	r3, #2
 8001a70:	6839      	ldr	r1, [r7, #0]
 8001a72:	440b      	add	r3, r1
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	041b      	lsls	r3, r3, #16
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a80:	3303      	adds	r3, #3
 8001a82:	6839      	ldr	r1, [r7, #0]
 8001a84:	440b      	add	r3, r1
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a96:	3304      	adds	r3, #4
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	3214      	adds	r2, #20
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aae:	3301      	adds	r3, #1
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3c4      	bcc.n	8001a46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	3301      	adds	r3, #1
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ada:	3302      	adds	r3, #2
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	041b      	lsls	r3, r3, #16
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aec:	3303      	adds	r3, #3
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afe:	3304      	adds	r3, #4
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d90a      	bls.n	8001b22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f005 f87a 	bl	8006c10 <realloc>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b2c:	e03e      	b.n	8001bac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	441a      	add	r2, r3
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fb69 	bl	8002212 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b42:	3304      	adds	r3, #4
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4a:	e00b      	b.n	8001b64 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	441a      	add	r2, r3
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	3b01      	subs	r3, #1
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	440b      	add	r3, r1
 8001b5a:	7812      	ldrb	r2, [r2, #0]
 8001b5c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	3301      	adds	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
 8001b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4413      	add	r3, r2
 8001b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3ed      	bcc.n	8001b4c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	3b01      	subs	r3, #1
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b82:	3b01      	subs	r3, #1
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	441a      	add	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	3220      	adds	r2, #32
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	3301      	adds	r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3bb      	bcc.n	8001b2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3738      	adds	r7, #56	; 0x38
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	08007088 	.word	0x08007088

08001bdc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	08006fec 	.word	0x08006fec

08001bf8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	611a      	str	r2, [r3, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68d8      	ldr	r0, [r3, #12]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6891      	ldr	r1, [r2, #8]
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	4798      	blx	r3
 8001c44:	4603      	mov	r3, r0
  };
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
  }
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <_ZN13STM32HardwareC1Ev+0x34>)
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	200001a8 	.word	0x200001a8

08001cc4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f804 	bl	8001cda <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f003 fe7e 	bl	80059f0 <HAL_UART_Receive_DMA>
    }
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_ZN13STM32Hardware4readEv>:

    int read(){
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d08:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ffa8 	bl	8001c66 <_ZN13STM32Hardware10getRdmaIndEv>
 8001d16:	4603      	mov	r3, r0
 8001d18:	429c      	cmp	r4, r3
 8001d1a:	bf14      	ite	ne
 8001d1c:	2301      	movne	r3, #1
 8001d1e:	2300      	moveq	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d012      	beq.n	8001d4c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d2c:	1c59      	adds	r1, r3, #1
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	791b      	ldrb	r3, [r3, #4]
 8001d3a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    }
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
	...

08001d58 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d108      	bne.n	8001d80 <_ZN13STM32Hardware5flushEv+0x28>
 8001d6e:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <_ZN13STM32Hardware5flushEv+0xe4>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <_ZN13STM32Hardware5flushEv+0x28>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <_ZN13STM32Hardware5flushEv+0x2a>
 8001d80:	2300      	movs	r3, #0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d055      	beq.n	8001e32 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <_ZN13STM32Hardware5flushEv+0xe4>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d047      	beq.n	8001e2c <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d217      	bcs.n	8001de0 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001dce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	89fa      	ldrh	r2, [r7, #14]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f003 fd99 	bl	8005910 <HAL_UART_Transmit_DMA>
 8001dde:	e01f      	b.n	8001e20 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001dec:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001df8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	89fa      	ldrh	r2, [r7, #14]
 8001e02:	4619      	mov	r1, r3
 8001e04:	f003 fd84 	bl	8005910 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart,(uint8_t *) &(tbuf), twind);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f003 fd78 	bl	8005910 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <_ZN13STM32Hardware5flushEv+0xe4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
      }
    }
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200002b0 	.word	0x200002b0

08001e40 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
      int n = length;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e56:	bfa8      	it	ge
 8001e58:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001e5c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e64:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	bf28      	it	cs
 8001e6e:	4613      	movcs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f004 ff2f 	bl	8006ce8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	4413      	add	r3, r2
 8001e94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d00b      	beq.n	8001ebe <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	18d1      	adds	r1, r2, r3
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f004 ff15 	bl	8006ce8 <memcpy>
      }

      flush();
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7ff ff4a 	bl	8001d58 <_ZN13STM32Hardware5flushEv>
    }
 8001ec4:	bf00      	nop
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	f000 ff50 	bl	8002d78 <HAL_GetTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
      data("")
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f842 	bl	8000f78 <_ZN3ros3MsgC1Ev>
 8001ef4:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <_ZN8std_msgs6StringC1Ev+0x28>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001efe:	605a      	str	r2, [r3, #4]
    {
    }
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	080070c0 	.word	0x080070c0
 8001f10:	08006f70 	.word	0x08006f70

08001f14 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe f96c 	bl	8000204 <strlen>
 8001f2c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f94c 	bl	80021d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	18d0      	adds	r0, r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f004 feca 	bl	8006ce8 <memcpy>
      offset += length_data;
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4413      	add	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    }
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	441a      	add	r2, r3
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f946 	bl	8002212 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e00b      	b.n	8001faa <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	441a      	add	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6839      	ldr	r1, [r7, #0]
 8001f9e:	440b      	add	r3, r1
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d3ed      	bcc.n	8001f92 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	441a      	add	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
     return offset;
 8001fda:	693b      	ldr	r3, [r7, #16]
    }
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	08007010 	.word	0x08007010

08002000 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	08007020 	.word	0x08007020

0800201c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	080070d8 	.word	0x080070d8

0800203c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ffe8 	bl	800201c <_ZN3ros15NodeHandleBase_C1Ev>
 800204c:	4a36      	ldr	r2, [pc, #216]	; (8002128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3304      	adds	r3, #4
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fe18 	bl	8001c8c <_ZN13STM32HardwareC1Ev>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f004 fdf8 	bl	8006c7e <memset>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f004 fdef 	bl	8006c7e <memset>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80020a6:	2264      	movs	r2, #100	; 0x64
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 fde7 	bl	8006c7e <memset>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80020b6:	2264      	movs	r2, #100	; 0x64
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 fddf 	bl	8006c7e <memset>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff faa2 	bl	8001660 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	080070ac 	.word	0x080070ac

0800212c <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <HAL_UART_TxCpltCallback+0x20>)
 8002136:	f000 f892 	bl	800225e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800213a:	4603      	mov	r3, r0
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fe0b 	bl	8001d58 <_ZN13STM32Hardware5flushEv>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200002b4 	.word	0x200002b4

08002150 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002158:	4805      	ldr	r0, [pc, #20]	; (8002170 <HAL_UART_RxCpltCallback+0x20>)
 800215a:	f000 f880 	bl	800225e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800215e:	4603      	mov	r3, r0
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fdba 	bl	8001cda <_ZN13STM32Hardware10reset_rbufEv>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200002b4 	.word	0x200002b4

08002174 <setup>:

void setup(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  nh.initNode();
 8002178:	4804      	ldr	r0, [pc, #16]	; (800218c <setup+0x18>)
 800217a:	f000 f87c 	bl	8002276 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 800217e:	4904      	ldr	r1, [pc, #16]	; (8002190 <setup+0x1c>)
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <setup+0x18>)
 8002182:	f000 f895 	bl	80022b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200002b4 	.word	0x200002b4
 8002190:	20000bf8 	.word	0x20000bf8

08002194 <loop>:

void loop(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002198:	2120      	movs	r1, #32
 800219a:	4809      	ldr	r0, [pc, #36]	; (80021c0 <loop+0x2c>)
 800219c:	f001 fcdd 	bl	8003b5a <HAL_GPIO_TogglePin>

  str_msg.data = hello;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <loop+0x30>)
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <loop+0x34>)
 80021a4:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 80021a6:	4907      	ldr	r1, [pc, #28]	; (80021c4 <loop+0x30>)
 80021a8:	4808      	ldr	r0, [pc, #32]	; (80021cc <loop+0x38>)
 80021aa:	f7ff fd3c 	bl	8001c26 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 80021ae:	4808      	ldr	r0, [pc, #32]	; (80021d0 <loop+0x3c>)
 80021b0:	f000 f8ae 	bl	8002310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(1000);
 80021b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021b8:	f000 fdea 	bl	8002d90 <HAL_Delay>
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40020000 	.word	0x40020000
 80021c4:	20000bf0 	.word	0x20000bf0
 80021c8:	20000000 	.word	0x20000000
 80021cc:	20000bf8 	.word	0x20000bf8
 80021d0:	200002b4 	.word	0x200002b4

080021d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	e00c      	b.n	80021fe <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	fa22 f103 	lsr.w	r1, r2, r3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	b2ca      	uxtb	r2, r1
 80021f6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d9ef      	bls.n	80021e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	e010      	b.n	800224a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	440a      	add	r2, r1
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	4611      	mov	r1, r2
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	00d2      	lsls	r2, r2, #3
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3301      	adds	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d9eb      	bls.n	8002228 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
  }
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3304      	adds	r3, #4
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fd1e 	bl	8001cc4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e01d      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d111      	bne.n	80022f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	60da      	str	r2, [r3, #12]
        return true;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e006      	b.n	8002304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3301      	adds	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b18      	cmp	r3, #24
 8002300:	ddde      	ble.n	80022c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8002302:	2300      	movs	r3, #0
  }
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3304      	adds	r3, #4
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fdd5 	bl	8001ecc <_ZN13STM32Hardware4timeEv>
 8002322:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002332:	4293      	cmp	r3, r2
 8002334:	d903      	bls.n	800233e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002344:	2b00      	cmp	r3, #0
 8002346:	d009      	beq.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d903      	bls.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002362:	2b00      	cmp	r3, #0
 8002364:	d014      	beq.n	8002390 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fdae 	bl	8001ecc <_ZN13STM32Hardware4timeEv>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad2      	subs	r2, r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800237c:	429a      	cmp	r2, r3
 800237e:	bf8c      	ite	hi
 8002380:	2301      	movhi	r3, #1
 8002382:	2300      	movls	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800238a:	f06f 0301 	mvn.w	r3, #1
 800238e:	e194      	b.n	80026ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fcb1 	bl	8001cfc <_ZN13STM32Hardware4readEv>
 800239a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f2c0 8174 	blt.w	800268c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	441a      	add	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023ba:	2b07      	cmp	r3, #7
 80023bc:	d11e      	bne.n	80023fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80023c4:	1c59      	adds	r1, r3, #1
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	b2d1      	uxtb	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	460a      	mov	r2, r1
 80023d6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80023e0:	1e5a      	subs	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1b4      	bne.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2208      	movs	r2, #8
 80023f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80023fa:	e7af      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002402:	2b00      	cmp	r3, #0
 8002404:	d128      	bne.n	8002458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2bff      	cmp	r3, #255	; 0xff
 800240a:	d10d      	bne.n	8002428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f103 0214 	add.w	r2, r3, #20
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002426:	e799      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fd4d 	bl	8001ecc <_ZN13STM32Hardware4timeEv>
 8002432:	4602      	mov	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	bf8c      	ite	hi
 8002440:	2301      	movhi	r3, #1
 8002442:	2300      	movls	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d088      	beq.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8002452:	f06f 0301 	mvn.w	r3, #1
 8002456:	e130      	b.n	80026ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800245e:	2b01      	cmp	r3, #1
 8002460:	d118      	bne.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2bfe      	cmp	r3, #254	; 0xfe
 8002466:	d107      	bne.n	8002478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002476:	e771      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002486:	2b00      	cmp	r3, #0
 8002488:	f47f af68 	bne.w	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f918 	bl	80026c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002492:	e763      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800249a:	2b02      	cmp	r3, #2
 800249c:	d113      	bne.n	80024c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80024c4:	e74a      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d110      	bne.n	80024f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	441a      	add	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80024f0:	e734      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d116      	bne.n	800252a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002502:	425a      	negs	r2, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	bf58      	it	pl
 800250a:	4253      	negpl	r3, r2
 800250c:	2bff      	cmp	r3, #255	; 0xff
 800250e:	d107      	bne.n	8002520 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800251e:	e71d      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002528:	e718      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002530:	2b05      	cmp	r3, #5
 8002532:	d10f      	bne.n	8002554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002552:	e703      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800255a:	2b06      	cmp	r3, #6
 800255c:	d117      	bne.n	800258e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	441a      	add	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2207      	movs	r2, #7
 8002574:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f47f aeec 	bne.w	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2208      	movs	r2, #8
 8002588:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800258c:	e6e6      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002594:	2b08      	cmp	r3, #8
 8002596:	f47f aee1 	bne.w	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80025a8:	425a      	negs	r2, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	bf58      	it	pl
 80025b0:	4253      	negpl	r3, r2
 80025b2:	2bff      	cmp	r3, #255	; 0xff
 80025b4:	f47f aed2 	bne.w	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d110      	bne.n	80025e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f87d 	bl	80026c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f898 	bl	80026fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025e2:	e06a      	b.n	80026ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025ea:	2b0a      	cmp	r3, #10
 80025ec:	d107      	bne.n	80025fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80025f4:	4619      	mov	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f960 	bl	80028bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80025fc:	e6ae      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002604:	2b06      	cmp	r3, #6
 8002606:	d10e      	bne.n	8002626 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f7ff f961 	bl	80018de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002624:	e69a      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800262c:	2b0b      	cmp	r3, #11
 800262e:	d104      	bne.n	800263a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002638:	e690      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002640:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f202 2222 	addw	r2, r2, #546	; 0x222
 800264a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f43f ae84 	beq.w	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800265a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002664:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800266e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002686:	4611      	mov	r1, r2
 8002688:	4798      	blx	r3
    while (true)
 800268a:	e667      	b.n	800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800268c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00f      	beq.n	80026b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d906      	bls.n	80026b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f809 	bl	80026c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80026b8:	2300      	movs	r3, #0
  }
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fc62 	bl	8000f98 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f107 020c 	add.w	r2, r7, #12
 80026de:	210a      	movs	r1, #10
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
    rt_time = hardware_.time();
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fbef 	bl	8001ecc <_ZN13STM32Hardware4timeEv>
 80026ee:	4602      	mov	r2, r0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80026fe:	b590      	push	{r4, r7, lr}
 8002700:	b08b      	sub	sp, #44	; 0x2c
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fd34 	bl	8001178 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
 8002714:	e062      	b.n	80027dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d056      	beq.n	80027d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	b29b      	uxth	r3, r3
 800273a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	6859      	ldr	r1, [r3, #4]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3308      	adds	r3, #8
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4608      	mov	r0, r1
 8002776:	4798      	blx	r3
 8002778:	4603      	mov	r3, r0
 800277a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4608      	mov	r0, r1
 80027a4:	4798      	blx	r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80027aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ae:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681c      	ldr	r4, [r3, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fa42 	bl	8001c4e <_ZN3ros9Publisher15getEndpointTypeEv>
 80027ca:	4601      	mov	r1, r0
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	461a      	mov	r2, r3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	3301      	adds	r3, #1
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	2b18      	cmp	r3, #24
 80027e0:	dd99      	ble.n	8002716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
 80027e6:	e05e      	b.n	80028a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d053      	beq.n	80028a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	b29b      	uxth	r3, r3
 8002808:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002822:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800282e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3308      	adds	r3, #8
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4608      	mov	r0, r1
 800283a:	4798      	blx	r3
 800283c:	4603      	mov	r3, r0
 800283e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4608      	mov	r0, r1
 8002860:	4798      	blx	r3
 8002862:	4603      	mov	r3, r0
 8002864:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800286a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681c      	ldr	r4, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002876:	f202 2222 	addw	r2, r2, #546	; 0x222
 800287a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002882:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3304      	adds	r3, #4
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4608      	mov	r0, r1
 8002892:	4798      	blx	r3
 8002894:	4601      	mov	r1, r0
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	461a      	mov	r2, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	3301      	adds	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	2b18      	cmp	r3, #24
 80028aa:	dd9d      	ble.n	80027e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80028b4:	bf00      	nop
 80028b6:	372c      	adds	r7, #44	; 0x2c
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd90      	pop	{r4, r7, pc}

080028bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe fb64 	bl	8000f98 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff faf9 	bl	8001ecc <_ZN13STM32Hardware4timeEv>
 80028da:	4602      	mov	r2, r0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	6839      	ldr	r1, [r7, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fbc3 	bl	8001078 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4915      	ldr	r1, [pc, #84]	; (800294c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80028f8:	fba1 1303 	umull	r1, r3, r1, r3
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002902:	6939      	ldr	r1, [r7, #16]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002908:	fba3 0302 	umull	r0, r3, r3, r2
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002912:	fb00 f303 	mul.w	r3, r0, r3
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	440b      	add	r3, r1
 8002920:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f8a6 	bl	8002a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fac9 	bl	8001ecc <_ZN13STM32Hardware4timeEv>
 800293a:	4602      	mov	r2, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	10624dd3 	.word	0x10624dd3
 8002950:	000f4240 	.word	0x000f4240

08002954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b63      	cmp	r3, #99	; 0x63
 8002964:	dd09      	ble.n	800297a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800296c:	f083 0301 	eor.w	r3, r3, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002976:	2300      	movs	r3, #0
 8002978:	e079      	b.n	8002a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002986:	3207      	adds	r2, #7
 8002988:	4611      	mov	r1, r2
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
 800298e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	22ff      	movs	r2, #255	; 0xff
 8002994:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	22fe      	movs	r2, #254	; 0xfe
 800299c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80029c6:	4413      	add	r3, r2
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	121b      	asrs	r3, r3, #8
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80029f2:	2305      	movs	r3, #5
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	e00c      	b.n	8002a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4413      	add	r3, r2
 80029fe:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3306      	adds	r3, #6
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	dded      	ble.n	80029f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3307      	adds	r3, #7
 8002a20:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	425a      	negs	r2, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	bf58      	it	pl
 8002a2c:	4253      	negpl	r3, r2
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	1c59      	adds	r1, r3, #1
 8002a34:	6179      	str	r1, [r7, #20]
 8002a36:	43d2      	mvns	r2, r2
 8002a38:	b2d1      	uxtb	r1, r2
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	460a      	mov	r2, r1
 8002a40:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4a:	dc0a      	bgt.n	8002a62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1d18      	adds	r0, r3, #4
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f7ff f9f1 	bl	8001e40 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	e005      	b.n	8002a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002a62:	4905      	ldr	r1, [pc, #20]	; (8002a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f849 	bl	8002afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	08007044 	.word	0x08007044

08002a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fa1e 	bl	8001ecc <_ZN13STM32Hardware4timeEv>
 8002a90:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4915      	ldr	r1, [pc, #84]	; (8002af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002a9a:	fba1 1303 	umull	r1, r3, r1, r3
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	1e5a      	subs	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ab6:	099b      	lsrs	r3, r3, #6
 8002ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002abc:	fb00 f303 	mul.w	r3, r0, r3
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	1aca      	subs	r2, r1, r3
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002acc:	4413      	add	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f7fd fd14 	bl	8000510 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	10624dd3 	.word	0x10624dd3
 8002af4:	000f4240 	.word	0x000f4240
 8002af8:	3b9aca00 	.word	0x3b9aca00

08002afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	2103      	movs	r1, #3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f804 	bl	8002b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	460b      	mov	r3, r1
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fce8 	bl	8001500 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002b30:	7afb      	ldrb	r3, [r7, #11]
 8002b32:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f107 0214 	add.w	r2, r7, #20
 8002b42:	2107      	movs	r1, #7
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	4798      	blx	r3
  }
 8002b48:	bf00      	nop
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <_Z41__static_initialization_and_destruction_0ii>:
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d110      	bne.n	8002b82 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d10b      	bne.n	8002b82 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8002b6a:	4808      	ldr	r0, [pc, #32]	; (8002b8c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002b6c:	f7ff fa66 	bl	800203c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002b70:	4807      	ldr	r0, [pc, #28]	; (8002b90 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b72:	f7ff f9b7 	bl	8001ee4 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002b76:	2300      	movs	r3, #0
 8002b78:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b7a:	4906      	ldr	r1, [pc, #24]	; (8002b94 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002b7c:	4806      	ldr	r0, [pc, #24]	; (8002b98 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002b7e:	f7ff f83b 	bl	8001bf8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200002b4 	.word	0x200002b4
 8002b90:	20000bf0 	.word	0x20000bf0
 8002b94:	08007080 	.word	0x08007080
 8002b98:	20000bf8 	.word	0x20000bf8

08002b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
    return configured_;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <_GLOBAL__sub_I_nh>:
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f7ff ffc6 	bl	8002b50 <_Z41__static_initialization_and_destruction_0ii>
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd0:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <_sbrk+0x5c>)
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <_sbrk+0x60>)
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <_sbrk+0x64>)
 8002be6:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <_sbrk+0x68>)
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d207      	bcs.n	8002c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf8:	f004 f84a 	bl	8006c90 <__errno>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	220c      	movs	r2, #12
 8002c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c06:	e009      	b.n	8002c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	4a05      	ldr	r2, [pc, #20]	; (8002c2c <_sbrk+0x64>)
 8002c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20020000 	.word	0x20020000
 8002c28:	00000400 	.word	0x00000400
 8002c2c:	20000c0c 	.word	0x20000c0c
 8002c30:	20000d60 	.word	0x20000d60

08002c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <SystemInit+0x20>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <SystemInit+0x20>)
 8002c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c5c:	f7ff ffea 	bl	8002c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c60:	480c      	ldr	r0, [pc, #48]	; (8002c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c62:	490d      	ldr	r1, [pc, #52]	; (8002c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c64:	4a0d      	ldr	r2, [pc, #52]	; (8002c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c68:	e002      	b.n	8002c70 <LoopCopyDataInit>

08002c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c6e:	3304      	adds	r3, #4

08002c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c74:	d3f9      	bcc.n	8002c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c78:	4c0a      	ldr	r4, [pc, #40]	; (8002ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c7c:	e001      	b.n	8002c82 <LoopFillZerobss>

08002c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c80:	3204      	adds	r2, #4

08002c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c84:	d3fb      	bcc.n	8002c7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c86:	f004 f809 	bl	8006c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c8a:	f7fd fc6d 	bl	8000568 <main>
  bx  lr    
 8002c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c98:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002c9c:	08007190 	.word	0x08007190
  ldr r2, =_sbss
 8002ca0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002ca4:	20000d5c 	.word	0x20000d5c

08002ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca8:	e7fe      	b.n	8002ca8 <ADC_IRQHandler>
	...

08002cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <HAL_Init+0x40>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <HAL_Init+0x40>)
 8002cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_Init+0x40>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <HAL_Init+0x40>)
 8002cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a07      	ldr	r2, [pc, #28]	; (8002cec <HAL_Init+0x40>)
 8002cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd4:	2003      	movs	r0, #3
 8002cd6:	f000 f94f 	bl	8002f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f000 f808 	bl	8002cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce0:	f7fd ff10 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023c00 	.word	0x40023c00

08002cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_InitTick+0x54>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_InitTick+0x58>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	4619      	mov	r1, r3
 8002d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f967 	bl	8002fe2 <HAL_SYSTICK_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00e      	b.n	8002d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d80a      	bhi.n	8002d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d24:	2200      	movs	r2, #0
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d2c:	f000 f92f 	bl	8002f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d30:	4a06      	ldr	r2, [pc, #24]	; (8002d4c <HAL_InitTick+0x5c>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000010 	.word	0x20000010
 8002d48:	20000018 	.word	0x20000018
 8002d4c:	20000014 	.word	0x20000014

08002d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_IncTick+0x20>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_IncTick+0x24>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_IncTick+0x24>)
 8002d62:	6013      	str	r3, [r2, #0]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000018 	.word	0x20000018
 8002d74:	20000c10 	.word	0x20000c10

08002d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_GetTick+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000c10 	.word	0x20000c10

08002d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d98:	f7ff ffee 	bl	8002d78 <HAL_GetTick>
 8002d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da8:	d005      	beq.n	8002db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_Delay+0x44>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002db6:	bf00      	nop
 8002db8:	f7ff ffde 	bl	8002d78 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d8f7      	bhi.n	8002db8 <HAL_Delay+0x28>
  {
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000018 	.word	0x20000018

08002dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df4:	4013      	ands	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0a:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	60d3      	str	r3, [r2, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <__NVIC_GetPriorityGrouping+0x18>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	f003 0307 	and.w	r3, r3, #7
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	db0b      	blt.n	8002e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	4907      	ldr	r1, [pc, #28]	; (8002e74 <__NVIC_EnableIRQ+0x38>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000e100 	.word	0xe000e100

08002e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	db0a      	blt.n	8002ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	490c      	ldr	r1, [pc, #48]	; (8002ec4 <__NVIC_SetPriority+0x4c>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea0:	e00a      	b.n	8002eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4908      	ldr	r1, [pc, #32]	; (8002ec8 <__NVIC_SetPriority+0x50>)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	3b04      	subs	r3, #4
 8002eb0:	0112      	lsls	r2, r2, #4
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	761a      	strb	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000e100 	.word	0xe000e100
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	; 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f1c3 0307 	rsb	r3, r3, #7
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	bf28      	it	cs
 8002eea:	2304      	movcs	r3, #4
 8002eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d902      	bls.n	8002efc <NVIC_EncodePriority+0x30>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3b03      	subs	r3, #3
 8002efa:	e000      	b.n	8002efe <NVIC_EncodePriority+0x32>
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	401a      	ands	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43d9      	mvns	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	4313      	orrs	r3, r2
         );
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3724      	adds	r7, #36	; 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f44:	d301      	bcc.n	8002f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00f      	b.n	8002f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <SysTick_Config+0x40>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f52:	210f      	movs	r1, #15
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f58:	f7ff ff8e 	bl	8002e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <SysTick_Config+0x40>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f62:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <SysTick_Config+0x40>)
 8002f64:	2207      	movs	r2, #7
 8002f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	e000e010 	.word	0xe000e010

08002f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff29 	bl	8002dd8 <__NVIC_SetPriorityGrouping>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa0:	f7ff ff3e 	bl	8002e20 <__NVIC_GetPriorityGrouping>
 8002fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f7ff ff8e 	bl	8002ecc <NVIC_EncodePriority>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff5d 	bl	8002e78 <__NVIC_SetPriority>
}
 8002fbe:	bf00      	nop
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	4603      	mov	r3, r0
 8002fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff31 	bl	8002e3c <__NVIC_EnableIRQ>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ffa2 	bl	8002f34 <SysTick_Config>
 8002ff0:	4603      	mov	r3, r0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003008:	f7ff feb6 	bl	8002d78 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e099      	b.n	800314c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003038:	e00f      	b.n	800305a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800303a:	f7ff fe9d 	bl	8002d78 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b05      	cmp	r3, #5
 8003046:	d908      	bls.n	800305a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2203      	movs	r2, #3
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e078      	b.n	800314c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e8      	bne.n	800303a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_DMA_Init+0x158>)
 8003074:	4013      	ands	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d107      	bne.n	80030c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	4313      	orrs	r3, r2
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f023 0307 	bic.w	r3, r3, #7
 80030da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d117      	bne.n	800311e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fb01 	bl	8003708 <DMA_CheckFifoParam>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2240      	movs	r2, #64	; 0x40
 8003110:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800311a:	2301      	movs	r3, #1
 800311c:	e016      	b.n	800314c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fab8 	bl	800369c <DMA_CalcBaseAndBitshift>
 800312c:	4603      	mov	r3, r0
 800312e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	223f      	movs	r2, #63	; 0x3f
 8003136:	409a      	lsls	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	f010803f 	.word	0xf010803f

08003158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_DMA_Start_IT+0x26>
 800317a:	2302      	movs	r3, #2
 800317c:	e040      	b.n	8003200 <HAL_DMA_Start_IT+0xa8>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d12f      	bne.n	80031f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2202      	movs	r2, #2
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fa4a 	bl	8003640 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	223f      	movs	r2, #63	; 0x3f
 80031b2:	409a      	lsls	r2, r3
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0216 	orr.w	r2, r2, #22
 80031c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0208 	orr.w	r2, r2, #8
 80031de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e005      	b.n	80031fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
 80031fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003216:	f7ff fdaf 	bl	8002d78 <HAL_GetTick>
 800321a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d008      	beq.n	800323a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e052      	b.n	80032e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0216 	bic.w	r2, r2, #22
 8003248:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003258:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_DMA_Abort+0x62>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0208 	bic.w	r2, r2, #8
 8003278:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328a:	e013      	b.n	80032b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800328c:	f7ff fd74 	bl	8002d78 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b05      	cmp	r3, #5
 8003298:	d90c      	bls.n	80032b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2203      	movs	r2, #3
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e015      	b.n	80032e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e4      	bne.n	800328c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	223f      	movs	r2, #63	; 0x3f
 80032c8:	409a      	lsls	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d004      	beq.n	8003306 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2280      	movs	r2, #128	; 0x80
 8003300:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e00c      	b.n	8003320 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2205      	movs	r2, #5
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003338:	4b8e      	ldr	r3, [pc, #568]	; (8003574 <HAL_DMA_IRQHandler+0x248>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a8e      	ldr	r2, [pc, #568]	; (8003578 <HAL_DMA_IRQHandler+0x24c>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0a9b      	lsrs	r3, r3, #10
 8003344:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	2208      	movs	r2, #8
 8003358:	409a      	lsls	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01a      	beq.n	8003398 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0204 	bic.w	r2, r2, #4
 800337e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	2208      	movs	r2, #8
 8003386:	409a      	lsls	r2, r3
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d012      	beq.n	80033ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	2201      	movs	r2, #1
 80033bc:	409a      	lsls	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f043 0202 	orr.w	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	2204      	movs	r2, #4
 80033d4:	409a      	lsls	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d012      	beq.n	8003404 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	2204      	movs	r2, #4
 80033f2:	409a      	lsls	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	f043 0204 	orr.w	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	2210      	movs	r2, #16
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d043      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d03c      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	2210      	movs	r2, #16
 8003428:	409a      	lsls	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d018      	beq.n	800346e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d108      	bne.n	800345c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d024      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
 800345a:	e01f      	b.n	800349c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
 800346c:	e016      	b.n	800349c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0208 	bic.w	r2, r2, #8
 800348a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	2220      	movs	r2, #32
 80034a2:	409a      	lsls	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 808f 	beq.w	80035cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8087 	beq.w	80035cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	2220      	movs	r2, #32
 80034c4:	409a      	lsls	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d136      	bne.n	8003544 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0216 	bic.w	r2, r2, #22
 80034e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <HAL_DMA_IRQHandler+0x1da>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0208 	bic.w	r2, r2, #8
 8003514:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	223f      	movs	r2, #63	; 0x3f
 800351c:	409a      	lsls	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	2b00      	cmp	r3, #0
 8003538:	d07e      	beq.n	8003638 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
        }
        return;
 8003542:	e079      	b.n	8003638 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01d      	beq.n	800358e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10d      	bne.n	800357c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	2b00      	cmp	r3, #0
 8003566:	d031      	beq.n	80035cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
 8003570:	e02c      	b.n	80035cc <HAL_DMA_IRQHandler+0x2a0>
 8003572:	bf00      	nop
 8003574:	20000010 	.word	0x20000010
 8003578:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d023      	beq.n	80035cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
 800358c:	e01e      	b.n	80035cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10f      	bne.n	80035bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0210 	bic.w	r2, r2, #16
 80035aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d032      	beq.n	800363a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d022      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2205      	movs	r2, #5
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	3301      	adds	r3, #1
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	429a      	cmp	r2, r3
 8003602:	d307      	bcc.n	8003614 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f2      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x2cc>
 8003612:	e000      	b.n	8003616 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003614:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	4798      	blx	r3
 8003636:	e000      	b.n	800363a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003638:	bf00      	nop
    }
  }
}
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800365c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b40      	cmp	r3, #64	; 0x40
 800366c:	d108      	bne.n	8003680 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800367e:	e007      	b.n	8003690 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	3b10      	subs	r3, #16
 80036ac:	4a14      	ldr	r2, [pc, #80]	; (8003700 <DMA_CalcBaseAndBitshift+0x64>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036b6:	4a13      	ldr	r2, [pc, #76]	; (8003704 <DMA_CalcBaseAndBitshift+0x68>)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d909      	bls.n	80036de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	659a      	str	r2, [r3, #88]	; 0x58
 80036dc:	e007      	b.n	80036ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036e6:	f023 0303 	bic.w	r3, r3, #3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	aaaaaaab 	.word	0xaaaaaaab
 8003704:	08007174 	.word	0x08007174

08003708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11f      	bne.n	8003762 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d856      	bhi.n	80037d6 <DMA_CheckFifoParam+0xce>
 8003728:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <DMA_CheckFifoParam+0x28>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003741 	.word	0x08003741
 8003734:	08003753 	.word	0x08003753
 8003738:	08003741 	.word	0x08003741
 800373c:	080037d7 	.word	0x080037d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d046      	beq.n	80037da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e043      	b.n	80037da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800375a:	d140      	bne.n	80037de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003760:	e03d      	b.n	80037de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376a:	d121      	bne.n	80037b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b03      	cmp	r3, #3
 8003770:	d837      	bhi.n	80037e2 <DMA_CheckFifoParam+0xda>
 8003772:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <DMA_CheckFifoParam+0x70>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	08003789 	.word	0x08003789
 800377c:	0800378f 	.word	0x0800378f
 8003780:	08003789 	.word	0x08003789
 8003784:	080037a1 	.word	0x080037a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e030      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d025      	beq.n	80037e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379e:	e022      	b.n	80037e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037a8:	d11f      	bne.n	80037ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ae:	e01c      	b.n	80037ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d903      	bls.n	80037be <DMA_CheckFifoParam+0xb6>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d003      	beq.n	80037c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037bc:	e018      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
      break;
 80037c2:	e015      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00e      	beq.n	80037ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      break;
 80037d4:	e00b      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      break;
 80037d6:	bf00      	nop
 80037d8:	e00a      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037da:	bf00      	nop
 80037dc:	e008      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
 80037e0:	e006      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e004      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ee:	bf00      	nop
    }
  } 
  
  return status; 
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop

08003800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	e165      	b.n	8003ae8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800381c:	2201      	movs	r2, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	429a      	cmp	r2, r3
 8003836:	f040 8154 	bne.w	8003ae2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d005      	beq.n	8003852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800384e:	2b02      	cmp	r3, #2
 8003850:	d130      	bne.n	80038b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	2203      	movs	r2, #3
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4013      	ands	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003888:	2201      	movs	r2, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 0201 	and.w	r2, r3, #1
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d017      	beq.n	80038f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	2203      	movs	r2, #3
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d123      	bne.n	8003944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	08da      	lsrs	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3208      	adds	r2, #8
 8003904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	220f      	movs	r2, #15
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	08da      	lsrs	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3208      	adds	r2, #8
 800393e:	69b9      	ldr	r1, [r7, #24]
 8003940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2203      	movs	r2, #3
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0203 	and.w	r2, r3, #3
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80ae 	beq.w	8003ae2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b5d      	ldr	r3, [pc, #372]	; (8003b00 <HAL_GPIO_Init+0x300>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	4a5c      	ldr	r2, [pc, #368]	; (8003b00 <HAL_GPIO_Init+0x300>)
 8003990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003994:	6453      	str	r3, [r2, #68]	; 0x44
 8003996:	4b5a      	ldr	r3, [pc, #360]	; (8003b00 <HAL_GPIO_Init+0x300>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a2:	4a58      	ldr	r2, [pc, #352]	; (8003b04 <HAL_GPIO_Init+0x304>)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	089b      	lsrs	r3, r3, #2
 80039a8:	3302      	adds	r3, #2
 80039aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4f      	ldr	r2, [pc, #316]	; (8003b08 <HAL_GPIO_Init+0x308>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d025      	beq.n	8003a1a <HAL_GPIO_Init+0x21a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4e      	ldr	r2, [pc, #312]	; (8003b0c <HAL_GPIO_Init+0x30c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01f      	beq.n	8003a16 <HAL_GPIO_Init+0x216>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4d      	ldr	r2, [pc, #308]	; (8003b10 <HAL_GPIO_Init+0x310>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d019      	beq.n	8003a12 <HAL_GPIO_Init+0x212>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4c      	ldr	r2, [pc, #304]	; (8003b14 <HAL_GPIO_Init+0x314>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_GPIO_Init+0x20e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4b      	ldr	r2, [pc, #300]	; (8003b18 <HAL_GPIO_Init+0x318>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00d      	beq.n	8003a0a <HAL_GPIO_Init+0x20a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4a      	ldr	r2, [pc, #296]	; (8003b1c <HAL_GPIO_Init+0x31c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d007      	beq.n	8003a06 <HAL_GPIO_Init+0x206>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a49      	ldr	r2, [pc, #292]	; (8003b20 <HAL_GPIO_Init+0x320>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_GPIO_Init+0x202>
 80039fe:	2306      	movs	r3, #6
 8003a00:	e00c      	b.n	8003a1c <HAL_GPIO_Init+0x21c>
 8003a02:	2307      	movs	r3, #7
 8003a04:	e00a      	b.n	8003a1c <HAL_GPIO_Init+0x21c>
 8003a06:	2305      	movs	r3, #5
 8003a08:	e008      	b.n	8003a1c <HAL_GPIO_Init+0x21c>
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	e006      	b.n	8003a1c <HAL_GPIO_Init+0x21c>
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e004      	b.n	8003a1c <HAL_GPIO_Init+0x21c>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e002      	b.n	8003a1c <HAL_GPIO_Init+0x21c>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <HAL_GPIO_Init+0x21c>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	f002 0203 	and.w	r2, r2, #3
 8003a22:	0092      	lsls	r2, r2, #2
 8003a24:	4093      	lsls	r3, r2
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a2c:	4935      	ldr	r1, [pc, #212]	; (8003b04 <HAL_GPIO_Init+0x304>)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	089b      	lsrs	r3, r3, #2
 8003a32:	3302      	adds	r3, #2
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a3a:	4b3a      	ldr	r3, [pc, #232]	; (8003b24 <HAL_GPIO_Init+0x324>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a5e:	4a31      	ldr	r2, [pc, #196]	; (8003b24 <HAL_GPIO_Init+0x324>)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a64:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <HAL_GPIO_Init+0x324>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a88:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <HAL_GPIO_Init+0x324>)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a8e:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_GPIO_Init+0x324>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ab2:	4a1c      	ldr	r2, [pc, #112]	; (8003b24 <HAL_GPIO_Init+0x324>)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <HAL_GPIO_Init+0x324>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003adc:	4a11      	ldr	r2, [pc, #68]	; (8003b24 <HAL_GPIO_Init+0x324>)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	2b0f      	cmp	r3, #15
 8003aec:	f67f ae96 	bls.w	800381c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	3724      	adds	r7, #36	; 0x24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40013800 	.word	0x40013800
 8003b08:	40020000 	.word	0x40020000
 8003b0c:	40020400 	.word	0x40020400
 8003b10:	40020800 	.word	0x40020800
 8003b14:	40020c00 	.word	0x40020c00
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40021400 	.word	0x40021400
 8003b20:	40021800 	.word	0x40021800
 8003b24:	40013c00 	.word	0x40013c00

08003b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b6c:	887a      	ldrh	r2, [r7, #2]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4013      	ands	r3, r2
 8003b72:	041a      	lsls	r2, r3, #16
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	43d9      	mvns	r1, r3
 8003b78:	887b      	ldrh	r3, [r7, #2]
 8003b7a:	400b      	ands	r3, r1
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	619a      	str	r2, [r3, #24]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0cc      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b68      	ldr	r3, [pc, #416]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d90c      	bls.n	8003bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b63      	ldr	r3, [pc, #396]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0b8      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be4:	4b59      	ldr	r3, [pc, #356]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a58      	ldr	r2, [pc, #352]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bfc:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4a52      	ldr	r2, [pc, #328]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c08:	4b50      	ldr	r3, [pc, #320]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	494d      	ldr	r1, [pc, #308]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d044      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d119      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e07f      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d003      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e06f      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5e:	4b3b      	ldr	r3, [pc, #236]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e067      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f023 0203 	bic.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4934      	ldr	r1, [pc, #208]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c80:	f7ff f87a 	bl	8002d78 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7ff f876 	bl	8002d78 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e04f      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 020c 	and.w	r2, r3, #12
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d1eb      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d20c      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e032      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4916      	ldr	r1, [pc, #88]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	490e      	ldr	r1, [pc, #56]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d16:	f000 f855 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	490a      	ldr	r1, [pc, #40]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003d28:	5ccb      	ldrb	r3, [r1, r3]
 8003d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2e:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe ffda 	bl	8002cf0 <HAL_InitTick>

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023c00 	.word	0x40023c00
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	0800715c 	.word	0x0800715c
 8003d54:	20000010 	.word	0x20000010
 8003d58:	20000014 	.word	0x20000014

08003d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000010 	.word	0x20000010

08003d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d78:	f7ff fff0 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	0a9b      	lsrs	r3, r3, #10
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	4903      	ldr	r1, [pc, #12]	; (8003d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8a:	5ccb      	ldrb	r3, [r1, r3]
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40023800 	.word	0x40023800
 8003d98:	0800716c 	.word	0x0800716c

08003d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da0:	f7ff ffdc 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003da4:	4602      	mov	r2, r0
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	0b5b      	lsrs	r3, r3, #13
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	4903      	ldr	r1, [pc, #12]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db2:	5ccb      	ldrb	r3, [r1, r3]
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	0800716c 	.word	0x0800716c

08003dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc8:	b0ae      	sub	sp, #184	; 0xb8
 8003dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dea:	4bcb      	ldr	r3, [pc, #812]	; (8004118 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	2b0c      	cmp	r3, #12
 8003df4:	f200 8206 	bhi.w	8004204 <HAL_RCC_GetSysClockFreq+0x440>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e35 	.word	0x08003e35
 8003e04:	08004205 	.word	0x08004205
 8003e08:	08004205 	.word	0x08004205
 8003e0c:	08004205 	.word	0x08004205
 8003e10:	08003e3d 	.word	0x08003e3d
 8003e14:	08004205 	.word	0x08004205
 8003e18:	08004205 	.word	0x08004205
 8003e1c:	08004205 	.word	0x08004205
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08004205 	.word	0x08004205
 8003e28:	08004205 	.word	0x08004205
 8003e2c:	08004205 	.word	0x08004205
 8003e30:	08004035 	.word	0x08004035
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e34:	4bb9      	ldr	r3, [pc, #740]	; (800411c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003e3a:	e1e7      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e3c:	4bb8      	ldr	r3, [pc, #736]	; (8004120 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e42:	e1e3      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e44:	4bb4      	ldr	r3, [pc, #720]	; (8004118 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e50:	4bb1      	ldr	r3, [pc, #708]	; (8004118 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d071      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5c:	4bae      	ldr	r3, [pc, #696]	; (8004118 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e68:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e82:	4622      	mov	r2, r4
 8003e84:	462b      	mov	r3, r5
 8003e86:	f04f 0000 	mov.w	r0, #0
 8003e8a:	f04f 0100 	mov.w	r1, #0
 8003e8e:	0159      	lsls	r1, r3, #5
 8003e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e94:	0150      	lsls	r0, r2, #5
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	1a51      	subs	r1, r2, r1
 8003e9e:	6439      	str	r1, [r7, #64]	; 0x40
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	018b      	lsls	r3, r1, #6
 8003eb8:	4641      	mov	r1, r8
 8003eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	018a      	lsls	r2, r1, #6
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	1a51      	subs	r1, r2, r1
 8003ec6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ec8:	4649      	mov	r1, r9
 8003eca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003edc:	4649      	mov	r1, r9
 8003ede:	00cb      	lsls	r3, r1, #3
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	00ca      	lsls	r2, r1, #3
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ef6:	462b      	mov	r3, r5
 8003ef8:	460a      	mov	r2, r1
 8003efa:	eb42 0303 	adc.w	r3, r2, r3
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	024b      	lsls	r3, r1, #9
 8003f10:	4621      	mov	r1, r4
 8003f12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f16:	4621      	mov	r1, r4
 8003f18:	024a      	lsls	r2, r1, #9
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003f30:	f7fc f970 	bl	8000214 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4613      	mov	r3, r2
 8003f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f3e:	e067      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f40:	4b75      	ldr	r3, [pc, #468]	; (8004118 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f4c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f58:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003f62:	4622      	mov	r2, r4
 8003f64:	462b      	mov	r3, r5
 8003f66:	f04f 0000 	mov.w	r0, #0
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	0159      	lsls	r1, r3, #5
 8003f70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f74:	0150      	lsls	r0, r2, #5
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	1a51      	subs	r1, r2, r1
 8003f7e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f80:	4629      	mov	r1, r5
 8003f82:	eb63 0301 	sbc.w	r3, r3, r1
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003f94:	4649      	mov	r1, r9
 8003f96:	018b      	lsls	r3, r1, #6
 8003f98:	4641      	mov	r1, r8
 8003f9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f9e:	4641      	mov	r1, r8
 8003fa0:	018a      	lsls	r2, r1, #6
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fa8:	4649      	mov	r1, r9
 8003faa:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fc2:	4692      	mov	sl, r2
 8003fc4:	469b      	mov	fp, r3
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	eb1a 0303 	adds.w	r3, sl, r3
 8003fcc:	623b      	str	r3, [r7, #32]
 8003fce:	462b      	mov	r3, r5
 8003fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	028b      	lsls	r3, r1, #10
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fec:	4621      	mov	r1, r4
 8003fee:	028a      	lsls	r2, r1, #10
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	673b      	str	r3, [r7, #112]	; 0x70
 8003ffc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ffe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004002:	f7fc f907 	bl	8000214 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4613      	mov	r3, r2
 800400c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004010:	4b41      	ldr	r3, [pc, #260]	; (8004118 <HAL_RCC_GetSysClockFreq+0x354>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	3301      	adds	r3, #1
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004026:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800402a:	fbb2 f3f3 	udiv	r3, r2, r3
 800402e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004032:	e0eb      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004034:	4b38      	ldr	r3, [pc, #224]	; (8004118 <HAL_RCC_GetSysClockFreq+0x354>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800403c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004040:	4b35      	ldr	r3, [pc, #212]	; (8004118 <HAL_RCC_GetSysClockFreq+0x354>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d06b      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404c:	4b32      	ldr	r3, [pc, #200]	; (8004118 <HAL_RCC_GetSysClockFreq+0x354>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	099b      	lsrs	r3, r3, #6
 8004052:	2200      	movs	r2, #0
 8004054:	66bb      	str	r3, [r7, #104]	; 0x68
 8004056:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800405a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405e:	663b      	str	r3, [r7, #96]	; 0x60
 8004060:	2300      	movs	r3, #0
 8004062:	667b      	str	r3, [r7, #100]	; 0x64
 8004064:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004068:	4622      	mov	r2, r4
 800406a:	462b      	mov	r3, r5
 800406c:	f04f 0000 	mov.w	r0, #0
 8004070:	f04f 0100 	mov.w	r1, #0
 8004074:	0159      	lsls	r1, r3, #5
 8004076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407a:	0150      	lsls	r0, r2, #5
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4621      	mov	r1, r4
 8004082:	1a51      	subs	r1, r2, r1
 8004084:	61b9      	str	r1, [r7, #24]
 8004086:	4629      	mov	r1, r5
 8004088:	eb63 0301 	sbc.w	r3, r3, r1
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800409a:	4659      	mov	r1, fp
 800409c:	018b      	lsls	r3, r1, #6
 800409e:	4651      	mov	r1, sl
 80040a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040a4:	4651      	mov	r1, sl
 80040a6:	018a      	lsls	r2, r1, #6
 80040a8:	4651      	mov	r1, sl
 80040aa:	ebb2 0801 	subs.w	r8, r2, r1
 80040ae:	4659      	mov	r1, fp
 80040b0:	eb63 0901 	sbc.w	r9, r3, r1
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040c8:	4690      	mov	r8, r2
 80040ca:	4699      	mov	r9, r3
 80040cc:	4623      	mov	r3, r4
 80040ce:	eb18 0303 	adds.w	r3, r8, r3
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	462b      	mov	r3, r5
 80040d6:	eb49 0303 	adc.w	r3, r9, r3
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80040e8:	4629      	mov	r1, r5
 80040ea:	024b      	lsls	r3, r1, #9
 80040ec:	4621      	mov	r1, r4
 80040ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040f2:	4621      	mov	r1, r4
 80040f4:	024a      	lsls	r2, r1, #9
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040fe:	2200      	movs	r2, #0
 8004100:	65bb      	str	r3, [r7, #88]	; 0x58
 8004102:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004104:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004108:	f7fc f884 	bl	8000214 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4613      	mov	r3, r2
 8004112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004116:	e065      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x420>
 8004118:	40023800 	.word	0x40023800
 800411c:	00f42400 	.word	0x00f42400
 8004120:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004124:	4b3d      	ldr	r3, [pc, #244]	; (800421c <HAL_RCC_GetSysClockFreq+0x458>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	099b      	lsrs	r3, r3, #6
 800412a:	2200      	movs	r2, #0
 800412c:	4618      	mov	r0, r3
 800412e:	4611      	mov	r1, r2
 8004130:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004134:	653b      	str	r3, [r7, #80]	; 0x50
 8004136:	2300      	movs	r3, #0
 8004138:	657b      	str	r3, [r7, #84]	; 0x54
 800413a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800413e:	4642      	mov	r2, r8
 8004140:	464b      	mov	r3, r9
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f04f 0100 	mov.w	r1, #0
 800414a:	0159      	lsls	r1, r3, #5
 800414c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004150:	0150      	lsls	r0, r2, #5
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4641      	mov	r1, r8
 8004158:	1a51      	subs	r1, r2, r1
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	4649      	mov	r1, r9
 800415e:	eb63 0301 	sbc.w	r3, r3, r1
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004170:	4659      	mov	r1, fp
 8004172:	018b      	lsls	r3, r1, #6
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800417a:	4651      	mov	r1, sl
 800417c:	018a      	lsls	r2, r1, #6
 800417e:	4651      	mov	r1, sl
 8004180:	1a54      	subs	r4, r2, r1
 8004182:	4659      	mov	r1, fp
 8004184:	eb63 0501 	sbc.w	r5, r3, r1
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	00eb      	lsls	r3, r5, #3
 8004192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004196:	00e2      	lsls	r2, r4, #3
 8004198:	4614      	mov	r4, r2
 800419a:	461d      	mov	r5, r3
 800419c:	4643      	mov	r3, r8
 800419e:	18e3      	adds	r3, r4, r3
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	464b      	mov	r3, r9
 80041a4:	eb45 0303 	adc.w	r3, r5, r3
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041b6:	4629      	mov	r1, r5
 80041b8:	028b      	lsls	r3, r1, #10
 80041ba:	4621      	mov	r1, r4
 80041bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c0:	4621      	mov	r1, r4
 80041c2:	028a      	lsls	r2, r1, #10
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041cc:	2200      	movs	r2, #0
 80041ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80041d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80041d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041d6:	f7fc f81d 	bl	8000214 <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4613      	mov	r3, r2
 80041e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041e4:	4b0d      	ldr	r3, [pc, #52]	; (800421c <HAL_RCC_GetSysClockFreq+0x458>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	0f1b      	lsrs	r3, r3, #28
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80041f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004202:	e003      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800420a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004210:	4618      	mov	r0, r3
 8004212:	37b8      	adds	r7, #184	; 0xb8
 8004214:	46bd      	mov	sp, r7
 8004216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	00f42400 	.word	0x00f42400

08004224 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e28d      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8083 	beq.w	800434a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004244:	4b94      	ldr	r3, [pc, #592]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b04      	cmp	r3, #4
 800424e:	d019      	beq.n	8004284 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004250:	4b91      	ldr	r3, [pc, #580]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004258:	2b08      	cmp	r3, #8
 800425a:	d106      	bne.n	800426a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800425c:	4b8e      	ldr	r3, [pc, #568]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004268:	d00c      	beq.n	8004284 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426a:	4b8b      	ldr	r3, [pc, #556]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004272:	2b0c      	cmp	r3, #12
 8004274:	d112      	bne.n	800429c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004276:	4b88      	ldr	r3, [pc, #544]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004282:	d10b      	bne.n	800429c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004284:	4b84      	ldr	r3, [pc, #528]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d05b      	beq.n	8004348 <HAL_RCC_OscConfig+0x124>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d157      	bne.n	8004348 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e25a      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	d106      	bne.n	80042b4 <HAL_RCC_OscConfig+0x90>
 80042a6:	4b7c      	ldr	r3, [pc, #496]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a7b      	ldr	r2, [pc, #492]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e01d      	b.n	80042f0 <HAL_RCC_OscConfig+0xcc>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0xb4>
 80042be:	4b76      	ldr	r3, [pc, #472]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a75      	ldr	r2, [pc, #468]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80042c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b73      	ldr	r3, [pc, #460]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a72      	ldr	r2, [pc, #456]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e00b      	b.n	80042f0 <HAL_RCC_OscConfig+0xcc>
 80042d8:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6e      	ldr	r2, [pc, #440]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80042de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b6c      	ldr	r3, [pc, #432]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a6b      	ldr	r2, [pc, #428]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80042ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d013      	beq.n	8004320 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fe fd3e 	bl	8002d78 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004300:	f7fe fd3a 	bl	8002d78 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e21f      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	4b61      	ldr	r3, [pc, #388]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0xdc>
 800431e:	e014      	b.n	800434a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fe fd2a 	bl	8002d78 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004328:	f7fe fd26 	bl	8002d78 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	; 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e20b      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	4b57      	ldr	r3, [pc, #348]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x104>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d06f      	beq.n	8004436 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004356:	4b50      	ldr	r3, [pc, #320]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b00      	cmp	r3, #0
 8004360:	d017      	beq.n	8004392 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004362:	4b4d      	ldr	r3, [pc, #308]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800436a:	2b08      	cmp	r3, #8
 800436c:	d105      	bne.n	800437a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800436e:	4b4a      	ldr	r3, [pc, #296]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437a:	4b47      	ldr	r3, [pc, #284]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d11c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004386:	4b44      	ldr	r3, [pc, #272]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d116      	bne.n	80043c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004392:	4b41      	ldr	r3, [pc, #260]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_RCC_OscConfig+0x186>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d001      	beq.n	80043aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e1d3      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043aa:	4b3b      	ldr	r3, [pc, #236]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4937      	ldr	r1, [pc, #220]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043be:	e03a      	b.n	8004436 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d020      	beq.n	800440a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c8:	4b34      	ldr	r3, [pc, #208]	; (800449c <HAL_RCC_OscConfig+0x278>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ce:	f7fe fcd3 	bl	8002d78 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d6:	f7fe fccf 	bl	8002d78 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e1b4      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e8:	4b2b      	ldr	r3, [pc, #172]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f4:	4b28      	ldr	r3, [pc, #160]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4925      	ldr	r1, [pc, #148]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004404:	4313      	orrs	r3, r2
 8004406:	600b      	str	r3, [r1, #0]
 8004408:	e015      	b.n	8004436 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800440a:	4b24      	ldr	r3, [pc, #144]	; (800449c <HAL_RCC_OscConfig+0x278>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fe fcb2 	bl	8002d78 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004418:	f7fe fcae 	bl	8002d78 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e193      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442a:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d036      	beq.n	80044b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d016      	beq.n	8004478 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <HAL_RCC_OscConfig+0x27c>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fe fc92 	bl	8002d78 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004458:	f7fe fc8e 	bl	8002d78 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e173      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 800446c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x234>
 8004476:	e01b      	b.n	80044b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_RCC_OscConfig+0x27c>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447e:	f7fe fc7b 	bl	8002d78 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004484:	e00e      	b.n	80044a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004486:	f7fe fc77 	bl	8002d78 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d907      	bls.n	80044a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e15c      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
 8004498:	40023800 	.word	0x40023800
 800449c:	42470000 	.word	0x42470000
 80044a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a4:	4b8a      	ldr	r3, [pc, #552]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 80044a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1ea      	bne.n	8004486 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8097 	beq.w	80045ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c2:	4b83      	ldr	r3, [pc, #524]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10f      	bne.n	80044ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	4b7f      	ldr	r3, [pc, #508]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	4a7e      	ldr	r2, [pc, #504]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044dc:	6413      	str	r3, [r2, #64]	; 0x40
 80044de:	4b7c      	ldr	r3, [pc, #496]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ee:	4b79      	ldr	r3, [pc, #484]	; (80046d4 <HAL_RCC_OscConfig+0x4b0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d118      	bne.n	800452c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044fa:	4b76      	ldr	r3, [pc, #472]	; (80046d4 <HAL_RCC_OscConfig+0x4b0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a75      	ldr	r2, [pc, #468]	; (80046d4 <HAL_RCC_OscConfig+0x4b0>)
 8004500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004506:	f7fe fc37 	bl	8002d78 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450e:	f7fe fc33 	bl	8002d78 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e118      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004520:	4b6c      	ldr	r3, [pc, #432]	; (80046d4 <HAL_RCC_OscConfig+0x4b0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x31e>
 8004534:	4b66      	ldr	r3, [pc, #408]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4a65      	ldr	r2, [pc, #404]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
 8004540:	e01c      	b.n	800457c <HAL_RCC_OscConfig+0x358>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b05      	cmp	r3, #5
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x340>
 800454a:	4b61      	ldr	r3, [pc, #388]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	4a60      	ldr	r2, [pc, #384]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	6713      	str	r3, [r2, #112]	; 0x70
 8004556:	4b5e      	ldr	r3, [pc, #376]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	4a5d      	ldr	r2, [pc, #372]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6713      	str	r3, [r2, #112]	; 0x70
 8004562:	e00b      	b.n	800457c <HAL_RCC_OscConfig+0x358>
 8004564:	4b5a      	ldr	r3, [pc, #360]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004568:	4a59      	ldr	r2, [pc, #356]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	6713      	str	r3, [r2, #112]	; 0x70
 8004570:	4b57      	ldr	r3, [pc, #348]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	4a56      	ldr	r2, [pc, #344]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 8004576:	f023 0304 	bic.w	r3, r3, #4
 800457a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d015      	beq.n	80045b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004584:	f7fe fbf8 	bl	8002d78 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458c:	f7fe fbf4 	bl	8002d78 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	; 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e0d7      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a2:	4b4b      	ldr	r3, [pc, #300]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0ee      	beq.n	800458c <HAL_RCC_OscConfig+0x368>
 80045ae:	e014      	b.n	80045da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fe fbe2 	bl	8002d78 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b6:	e00a      	b.n	80045ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b8:	f7fe fbde 	bl	8002d78 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e0c1      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ce:	4b40      	ldr	r3, [pc, #256]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1ee      	bne.n	80045b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d105      	bne.n	80045ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e0:	4b3b      	ldr	r3, [pc, #236]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	4a3a      	ldr	r2, [pc, #232]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 80045e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80ad 	beq.w	8004750 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045f6:	4b36      	ldr	r3, [pc, #216]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d060      	beq.n	80046c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d145      	bne.n	8004696 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460a:	4b33      	ldr	r3, [pc, #204]	; (80046d8 <HAL_RCC_OscConfig+0x4b4>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fe fbb2 	bl	8002d78 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004618:	f7fe fbae 	bl	8002d78 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e093      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	4b29      	ldr	r3, [pc, #164]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	019b      	lsls	r3, r3, #6
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	3b01      	subs	r3, #1
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	071b      	lsls	r3, r3, #28
 8004662:	491b      	ldr	r1, [pc, #108]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004668:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <HAL_RCC_OscConfig+0x4b4>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fe fb83 	bl	8002d78 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004676:	f7fe fb7f 	bl	8002d78 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e064      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x452>
 8004694:	e05c      	b.n	8004750 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004696:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <HAL_RCC_OscConfig+0x4b4>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469c:	f7fe fb6c 	bl	8002d78 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fe fb68 	bl	8002d78 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e04d      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCC_OscConfig+0x4ac>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x480>
 80046c2:	e045      	b.n	8004750 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d107      	bne.n	80046dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e040      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40007000 	.word	0x40007000
 80046d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046dc:	4b1f      	ldr	r3, [pc, #124]	; (800475c <HAL_RCC_OscConfig+0x538>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d030      	beq.n	800474c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d129      	bne.n	800474c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d122      	bne.n	800474c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800470c:	4013      	ands	r3, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004712:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004714:	4293      	cmp	r3, r2
 8004716:	d119      	bne.n	800474c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	3b01      	subs	r3, #1
 8004726:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004728:	429a      	cmp	r2, r3
 800472a:	d10f      	bne.n	800474c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004738:	429a      	cmp	r2, r3
 800473a:	d107      	bne.n	800474c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800

08004760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e041      	b.n	80047f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fc f9e4 	bl	8000b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f000 fc8e 	bl	80050c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e041      	b.n	8004894 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f839 	bl	800489c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f000 fc3f 	bl	80050c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e041      	b.n	8004946 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f839 	bl	800494e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f000 fbe6 	bl	80050c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e097      	b.n	8004aa6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fc f920 	bl	8000bd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6812      	ldr	r2, [r2, #0]
 80049a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a6:	f023 0307 	bic.w	r3, r3, #7
 80049aa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f000 fb82 	bl	80050c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e4:	f023 0303 	bic.w	r3, r3, #3
 80049e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	4313      	orrs	r3, r2
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a02:	f023 030c 	bic.w	r3, r3, #12
 8004a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	011a      	lsls	r2, r3, #4
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	031b      	lsls	r3, r3, #12
 8004a32:	4313      	orrs	r3, r2
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a40:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a48:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	4313      	orrs	r3, r2
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d020      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01b      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f06f 0202 	mvn.w	r2, #2
 8004ae2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fac2 	bl	8005082 <HAL_TIM_IC_CaptureCallback>
 8004afe:	e005      	b.n	8004b0c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fab4 	bl	800506e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fac5 	bl	8005096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d020      	beq.n	8004b5e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01b      	beq.n	8004b5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f06f 0204 	mvn.w	r2, #4
 8004b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa9c 	bl	8005082 <HAL_TIM_IC_CaptureCallback>
 8004b4a:	e005      	b.n	8004b58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fa8e 	bl	800506e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fa9f 	bl	8005096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d020      	beq.n	8004baa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01b      	beq.n	8004baa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f06f 0208 	mvn.w	r2, #8
 8004b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2204      	movs	r2, #4
 8004b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fa76 	bl	8005082 <HAL_TIM_IC_CaptureCallback>
 8004b96:	e005      	b.n	8004ba4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fa68 	bl	800506e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fa79 	bl	8005096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d020      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01b      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0210 	mvn.w	r2, #16
 8004bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2208      	movs	r2, #8
 8004bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fa50 	bl	8005082 <HAL_TIM_IC_CaptureCallback>
 8004be2:	e005      	b.n	8004bf0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fa42 	bl	800506e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fa53 	bl	8005096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00c      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f06f 0201 	mvn.w	r2, #1
 8004c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fa20 	bl	800505a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00c      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fe0f 	bl	800585c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00c      	beq.n	8004c62 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fa24 	bl	80050aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00c      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f06f 0220 	mvn.w	r2, #32
 8004c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fde1 	bl	8005848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_OC_ConfigChannel+0x1e>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e048      	b.n	8004d40 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b0c      	cmp	r3, #12
 8004cba:	d839      	bhi.n	8004d30 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004cbc:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004cf9 	.word	0x08004cf9
 8004cc8:	08004d31 	.word	0x08004d31
 8004ccc:	08004d31 	.word	0x08004d31
 8004cd0:	08004d31 	.word	0x08004d31
 8004cd4:	08004d07 	.word	0x08004d07
 8004cd8:	08004d31 	.word	0x08004d31
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004d31 	.word	0x08004d31
 8004ce4:	08004d15 	.word	0x08004d15
 8004ce8:	08004d31 	.word	0x08004d31
 8004cec:	08004d31 	.word	0x08004d31
 8004cf0:	08004d31 	.word	0x08004d31
 8004cf4:	08004d23 	.word	0x08004d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fa8a 	bl	8005218 <TIM_OC1_SetConfig>
      break;
 8004d04:	e017      	b.n	8004d36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 faf3 	bl	80052f8 <TIM_OC2_SetConfig>
      break;
 8004d12:	e010      	b.n	8004d36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fb62 	bl	80053e4 <TIM_OC3_SetConfig>
      break;
 8004d20:	e009      	b.n	8004d36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fbcf 	bl	80054cc <TIM_OC4_SetConfig>
      break;
 8004d2e:	e002      	b.n	8004d36 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	75fb      	strb	r3, [r7, #23]
      break;
 8004d34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e0ae      	b.n	8004ec4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	f200 809f 	bhi.w	8004eb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004db1 	.word	0x08004db1
 8004d80:	08004eb5 	.word	0x08004eb5
 8004d84:	08004eb5 	.word	0x08004eb5
 8004d88:	08004eb5 	.word	0x08004eb5
 8004d8c:	08004df1 	.word	0x08004df1
 8004d90:	08004eb5 	.word	0x08004eb5
 8004d94:	08004eb5 	.word	0x08004eb5
 8004d98:	08004eb5 	.word	0x08004eb5
 8004d9c:	08004e33 	.word	0x08004e33
 8004da0:	08004eb5 	.word	0x08004eb5
 8004da4:	08004eb5 	.word	0x08004eb5
 8004da8:	08004eb5 	.word	0x08004eb5
 8004dac:	08004e73 	.word	0x08004e73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fa2e 	bl	8005218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0208 	orr.w	r2, r2, #8
 8004dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0204 	bic.w	r2, r2, #4
 8004dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6999      	ldr	r1, [r3, #24]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	619a      	str	r2, [r3, #24]
      break;
 8004dee:	e064      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fa7e 	bl	80052f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6999      	ldr	r1, [r3, #24]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	021a      	lsls	r2, r3, #8
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	619a      	str	r2, [r3, #24]
      break;
 8004e30:	e043      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fad3 	bl	80053e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0208 	orr.w	r2, r2, #8
 8004e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0204 	bic.w	r2, r2, #4
 8004e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69d9      	ldr	r1, [r3, #28]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	61da      	str	r2, [r3, #28]
      break;
 8004e70:	e023      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fb27 	bl	80054cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69d9      	ldr	r1, [r3, #28]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	021a      	lsls	r2, r3, #8
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	61da      	str	r2, [r3, #28]
      break;
 8004eb2:	e002      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e0b4      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x186>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f20:	d03e      	beq.n	8004fa0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f26:	f200 8087 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	f000 8086 	beq.w	800503e <HAL_TIM_ConfigClockSource+0x172>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	d87f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f38:	2b70      	cmp	r3, #112	; 0x70
 8004f3a:	d01a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0xa6>
 8004f3c:	2b70      	cmp	r3, #112	; 0x70
 8004f3e:	d87b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b60      	cmp	r3, #96	; 0x60
 8004f42:	d050      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f44:	2b60      	cmp	r3, #96	; 0x60
 8004f46:	d877      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b50      	cmp	r3, #80	; 0x50
 8004f4a:	d03c      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0xfa>
 8004f4c:	2b50      	cmp	r3, #80	; 0x50
 8004f4e:	d873      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f50:	2b40      	cmp	r3, #64	; 0x40
 8004f52:	d058      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x13a>
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d86f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b30      	cmp	r3, #48	; 0x30
 8004f5a:	d064      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f5c:	2b30      	cmp	r3, #48	; 0x30
 8004f5e:	d86b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d060      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d867      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d05a      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f70:	e062      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f82:	f000 fb73 	bl	800566c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	609a      	str	r2, [r3, #8]
      break;
 8004f9e:	e04f      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fb0:	f000 fb5c 	bl	800566c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc2:	609a      	str	r2, [r3, #8]
      break;
 8004fc4:	e03c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 fad0 	bl	8005578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2150      	movs	r1, #80	; 0x50
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fb29 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e02c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 faef 	bl	80055d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2160      	movs	r1, #96	; 0x60
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fb19 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8005004:	e01c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	461a      	mov	r2, r3
 8005014:	f000 fab0 	bl	8005578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2140      	movs	r1, #64	; 0x40
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fb09 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8005024:	e00c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f000 fb00 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8005036:	e003      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      break;
 800503c:	e000      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800503e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
	...

080050c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a46      	ldr	r2, [pc, #280]	; (80051ec <TIM_Base_SetConfig+0x12c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d013      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050de:	d00f      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a43      	ldr	r2, [pc, #268]	; (80051f0 <TIM_Base_SetConfig+0x130>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00b      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a42      	ldr	r2, [pc, #264]	; (80051f4 <TIM_Base_SetConfig+0x134>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a41      	ldr	r2, [pc, #260]	; (80051f8 <TIM_Base_SetConfig+0x138>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a40      	ldr	r2, [pc, #256]	; (80051fc <TIM_Base_SetConfig+0x13c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d108      	bne.n	8005112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a35      	ldr	r2, [pc, #212]	; (80051ec <TIM_Base_SetConfig+0x12c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d02b      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005120:	d027      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a32      	ldr	r2, [pc, #200]	; (80051f0 <TIM_Base_SetConfig+0x130>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d023      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a31      	ldr	r2, [pc, #196]	; (80051f4 <TIM_Base_SetConfig+0x134>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d01f      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a30      	ldr	r2, [pc, #192]	; (80051f8 <TIM_Base_SetConfig+0x138>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01b      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a2f      	ldr	r2, [pc, #188]	; (80051fc <TIM_Base_SetConfig+0x13c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d017      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a2e      	ldr	r2, [pc, #184]	; (8005200 <TIM_Base_SetConfig+0x140>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <TIM_Base_SetConfig+0x144>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00f      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a2c      	ldr	r2, [pc, #176]	; (8005208 <TIM_Base_SetConfig+0x148>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00b      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2b      	ldr	r2, [pc, #172]	; (800520c <TIM_Base_SetConfig+0x14c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d007      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2a      	ldr	r2, [pc, #168]	; (8005210 <TIM_Base_SetConfig+0x150>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a29      	ldr	r2, [pc, #164]	; (8005214 <TIM_Base_SetConfig+0x154>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d108      	bne.n	8005184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a10      	ldr	r2, [pc, #64]	; (80051ec <TIM_Base_SetConfig+0x12c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d003      	beq.n	80051b8 <TIM_Base_SetConfig+0xf8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a12      	ldr	r2, [pc, #72]	; (80051fc <TIM_Base_SetConfig+0x13c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d103      	bne.n	80051c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d105      	bne.n	80051de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	611a      	str	r2, [r3, #16]
  }
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40000800 	.word	0x40000800
 80051f8:	40000c00 	.word	0x40000c00
 80051fc:	40010400 	.word	0x40010400
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800
 800520c:	40001800 	.word	0x40001800
 8005210:	40001c00 	.word	0x40001c00
 8005214:	40002000 	.word	0x40002000

08005218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f023 0201 	bic.w	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 0302 	bic.w	r3, r3, #2
 8005260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a20      	ldr	r2, [pc, #128]	; (80052f0 <TIM_OC1_SetConfig+0xd8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_OC1_SetConfig+0x64>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <TIM_OC1_SetConfig+0xdc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d10c      	bne.n	8005296 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0308 	bic.w	r3, r3, #8
 8005282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f023 0304 	bic.w	r3, r3, #4
 8005294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <TIM_OC1_SetConfig+0xd8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d003      	beq.n	80052a6 <TIM_OC1_SetConfig+0x8e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a14      	ldr	r2, [pc, #80]	; (80052f4 <TIM_OC1_SetConfig+0xdc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d111      	bne.n	80052ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	621a      	str	r2, [r3, #32]
}
 80052e4:	bf00      	nop
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40010400 	.word	0x40010400

080052f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f023 0210 	bic.w	r2, r3, #16
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800532e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 0320 	bic.w	r3, r3, #32
 8005342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a22      	ldr	r2, [pc, #136]	; (80053dc <TIM_OC2_SetConfig+0xe4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_OC2_SetConfig+0x68>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a21      	ldr	r2, [pc, #132]	; (80053e0 <TIM_OC2_SetConfig+0xe8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d10d      	bne.n	800537c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800537a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a17      	ldr	r2, [pc, #92]	; (80053dc <TIM_OC2_SetConfig+0xe4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_OC2_SetConfig+0x94>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <TIM_OC2_SetConfig+0xe8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d113      	bne.n	80053b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800539a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400

080053e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800542c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a21      	ldr	r2, [pc, #132]	; (80054c4 <TIM_OC3_SetConfig+0xe0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_OC3_SetConfig+0x66>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a20      	ldr	r2, [pc, #128]	; (80054c8 <TIM_OC3_SetConfig+0xe4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d10d      	bne.n	8005466 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a16      	ldr	r2, [pc, #88]	; (80054c4 <TIM_OC3_SetConfig+0xe0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d003      	beq.n	8005476 <TIM_OC3_SetConfig+0x92>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a15      	ldr	r2, [pc, #84]	; (80054c8 <TIM_OC3_SetConfig+0xe4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d113      	bne.n	800549e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800547c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	621a      	str	r2, [r3, #32]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40010400 	.word	0x40010400

080054cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	031b      	lsls	r3, r3, #12
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a12      	ldr	r2, [pc, #72]	; (8005570 <TIM_OC4_SetConfig+0xa4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_OC4_SetConfig+0x68>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a11      	ldr	r2, [pc, #68]	; (8005574 <TIM_OC4_SetConfig+0xa8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d109      	bne.n	8005548 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40010000 	.word	0x40010000
 8005574:	40010400 	.word	0x40010400

08005578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 030a 	bic.w	r3, r3, #10
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	f023 0210 	bic.w	r2, r3, #16
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	031b      	lsls	r3, r3, #12
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005612:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	f043 0307 	orr.w	r3, r3, #7
 8005658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	021a      	lsls	r2, r3, #8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	431a      	orrs	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4313      	orrs	r3, r2
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	609a      	str	r2, [r3, #8]
}
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e05a      	b.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a21      	ldr	r2, [pc, #132]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d022      	beq.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005710:	d01d      	beq.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1d      	ldr	r2, [pc, #116]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d018      	beq.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1b      	ldr	r2, [pc, #108]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00e      	beq.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a18      	ldr	r2, [pc, #96]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d009      	beq.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a17      	ldr	r2, [pc, #92]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d10c      	bne.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	4313      	orrs	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40010000 	.word	0x40010000
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	40010400 	.word	0x40010400
 800579c:	40014000 	.word	0x40014000
 80057a0:	40001800 	.word	0x40001800

080057a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057bc:	2302      	movs	r3, #2
 80057be:	e03d      	b.n	800583c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e042      	b.n	8005908 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fb fa52 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2224      	movs	r2, #36	; 0x24
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 ff37 	bl	8006728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08c      	sub	sp, #48	; 0x30
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b20      	cmp	r3, #32
 8005928:	d156      	bne.n	80059d8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_UART_Transmit_DMA+0x26>
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e04f      	b.n	80059da <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	88fa      	ldrh	r2, [r7, #6]
 8005944:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	88fa      	ldrh	r2, [r7, #6]
 800594a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2221      	movs	r2, #33	; 0x21
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	4a21      	ldr	r2, [pc, #132]	; (80059e4 <HAL_UART_Transmit_DMA+0xd4>)
 8005960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <HAL_UART_Transmit_DMA+0xd8>)
 8005968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	4a1f      	ldr	r2, [pc, #124]	; (80059ec <HAL_UART_Transmit_DMA+0xdc>)
 8005970:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	2200      	movs	r2, #0
 8005978:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800597a:	f107 0308 	add.w	r3, r7, #8
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	6819      	ldr	r1, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3304      	adds	r3, #4
 800598e:	461a      	mov	r2, r3
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	f7fd fbe1 	bl	8003158 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800599e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3314      	adds	r3, #20
 80059a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	e853 3f00 	ldrex	r3, [r3]
 80059ae:	617b      	str	r3, [r7, #20]
   return(result);
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3314      	adds	r3, #20
 80059be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c0:	627a      	str	r2, [r7, #36]	; 0x24
 80059c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6a39      	ldr	r1, [r7, #32]
 80059c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e5      	bne.n	80059a0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e000      	b.n	80059da <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80059d8:	2302      	movs	r3, #2
  }
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3730      	adds	r7, #48	; 0x30
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	08005fb5 	.word	0x08005fb5
 80059e8:	0800604f 	.word	0x0800604f
 80059ec:	080061d3 	.word	0x080061d3

080059f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d112      	bne.n	8005a30 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_UART_Receive_DMA+0x26>
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e00b      	b.n	8005a32 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	461a      	mov	r2, r3
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 fc1e 	bl	8006268 <UART_Start_Receive_DMA>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	e000      	b.n	8005a32 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
  }
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b0ba      	sub	sp, #232	; 0xe8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10f      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x66>
 8005a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fd85 	bl	80065aa <UART_Receive_IT>
      return;
 8005aa0:	e25b      	b.n	8005f5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 80de 	beq.w	8005c68 <HAL_UART_IRQHandler+0x22c>
 8005aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80d1 	beq.w	8005c68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <HAL_UART_IRQHandler+0xae>
 8005ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	f043 0201 	orr.w	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <HAL_UART_IRQHandler+0xd2>
 8005af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b06:	f043 0202 	orr.w	r2, r3, #2
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00b      	beq.n	8005b32 <HAL_UART_IRQHandler+0xf6>
 8005b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	f043 0204 	orr.w	r2, r3, #4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d011      	beq.n	8005b62 <HAL_UART_IRQHandler+0x126>
 8005b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d105      	bne.n	8005b56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	f043 0208 	orr.w	r2, r3, #8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 81f2 	beq.w	8005f50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <HAL_UART_IRQHandler+0x14e>
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fd10 	bl	80065aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	bf0c      	ite	eq
 8005b98:	2301      	moveq	r3, #1
 8005b9a:	2300      	movne	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d103      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x17a>
 8005bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d04f      	beq.n	8005c56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fc18 	bl	80063ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d141      	bne.n	8005c4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1d9      	bne.n	8005bca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d013      	beq.n	8005c46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c22:	4a7e      	ldr	r2, [pc, #504]	; (8005e1c <HAL_UART_IRQHandler+0x3e0>)
 8005c24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fd fb5c 	bl	80032e8 <HAL_DMA_Abort_IT>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d016      	beq.n	8005c64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c40:	4610      	mov	r0, r2
 8005c42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c44:	e00e      	b.n	8005c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f99e 	bl	8005f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c4c:	e00a      	b.n	8005c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f99a 	bl	8005f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c54:	e006      	b.n	8005c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f996 	bl	8005f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005c62:	e175      	b.n	8005f50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c64:	bf00      	nop
    return;
 8005c66:	e173      	b.n	8005f50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	f040 814f 	bne.w	8005f10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c76:	f003 0310 	and.w	r3, r3, #16
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 8148 	beq.w	8005f10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 8141 	beq.w	8005f10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60bb      	str	r3, [r7, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	60bb      	str	r3, [r7, #8]
 8005ca2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	f040 80b6 	bne.w	8005e20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 8145 	beq.w	8005f54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	f080 813e 	bcs.w	8005f54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cea:	f000 8088 	beq.w	8005dfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1d9      	bne.n	8005cee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3314      	adds	r3, #20
 8005d40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d4c:	f023 0301 	bic.w	r3, r3, #1
 8005d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3314      	adds	r3, #20
 8005d5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e1      	bne.n	8005d3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3314      	adds	r3, #20
 8005d7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3314      	adds	r3, #20
 8005d96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005da0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e3      	bne.n	8005d76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dce:	f023 0310 	bic.w	r3, r3, #16
 8005dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	330c      	adds	r3, #12
 8005ddc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005de0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005de2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005de6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e3      	bne.n	8005dbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fd fa05 	bl	8003208 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2202      	movs	r2, #2
 8005e02:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f8c1 	bl	8005f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e1a:	e09b      	b.n	8005f54 <HAL_UART_IRQHandler+0x518>
 8005e1c:	080064b3 	.word	0x080064b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 808e 	beq.w	8005f58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8089 	beq.w	8005f58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	330c      	adds	r3, #12
 8005e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e6a:	647a      	str	r2, [r7, #68]	; 0x44
 8005e6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e3      	bne.n	8005e46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ea2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e3      	bne.n	8005e7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	330c      	adds	r3, #12
 8005eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0310 	bic.w	r3, r3, #16
 8005eda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	330c      	adds	r3, #12
 8005ee4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ee8:	61fa      	str	r2, [r7, #28]
 8005eea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	69b9      	ldr	r1, [r7, #24]
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e3      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f847 	bl	8005f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f0e:	e023      	b.n	8005f58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <HAL_UART_IRQHandler+0x4f4>
 8005f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fad6 	bl	80064da <UART_Transmit_IT>
    return;
 8005f2e:	e014      	b.n	8005f5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00e      	beq.n	8005f5a <HAL_UART_IRQHandler+0x51e>
 8005f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fb16 	bl	800657a <UART_EndTransmit_IT>
    return;
 8005f4e:	e004      	b.n	8005f5a <HAL_UART_IRQHandler+0x51e>
    return;
 8005f50:	bf00      	nop
 8005f52:	e002      	b.n	8005f5a <HAL_UART_IRQHandler+0x51e>
      return;
 8005f54:	bf00      	nop
 8005f56:	e000      	b.n	8005f5a <HAL_UART_IRQHandler+0x51e>
      return;
 8005f58:	bf00      	nop
  }
}
 8005f5a:	37e8      	adds	r7, #232	; 0xe8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b090      	sub	sp, #64	; 0x40
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d137      	bne.n	8006040 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3314      	adds	r3, #20
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3314      	adds	r3, #20
 8005ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ff6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e5      	bne.n	8005fd6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800600a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	60fb      	str	r3, [r7, #12]
   return(result);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
 8006022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	330c      	adds	r3, #12
 8006028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800602a:	61fa      	str	r2, [r7, #28]
 800602c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	69b9      	ldr	r1, [r7, #24]
 8006030:	69fa      	ldr	r2, [r7, #28]
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	617b      	str	r3, [r7, #20]
   return(result);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e5      	bne.n	800600a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800603e:	e002      	b.n	8006046 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006040:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006042:	f7fc f873 	bl	800212c <HAL_UART_TxCpltCallback>
}
 8006046:	bf00      	nop
 8006048:	3740      	adds	r7, #64	; 0x40
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff ff7f 	bl	8005f60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006062:	bf00      	nop
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b09c      	sub	sp, #112	; 0x70
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d172      	bne.n	800616c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006088:	2200      	movs	r2, #0
 800608a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800608c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	330c      	adds	r3, #12
 8006092:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800609c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80060a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	330c      	adds	r3, #12
 80060aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e5      	bne.n	800608c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3314      	adds	r3, #20
 80060c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d2:	f023 0301 	bic.w	r3, r3, #1
 80060d6:	667b      	str	r3, [r7, #100]	; 0x64
 80060d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3314      	adds	r3, #20
 80060de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80060e0:	647a      	str	r2, [r7, #68]	; 0x44
 80060e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e8:	e841 2300 	strex	r3, r2, [r1]
 80060ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e5      	bne.n	80060c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3314      	adds	r3, #20
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	e853 3f00 	ldrex	r3, [r3]
 8006102:	623b      	str	r3, [r7, #32]
   return(result);
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800610a:	663b      	str	r3, [r7, #96]	; 0x60
 800610c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3314      	adds	r3, #20
 8006112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006114:	633a      	str	r2, [r7, #48]	; 0x30
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800611a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e5      	bne.n	80060f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800612a:	2220      	movs	r2, #32
 800612c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006134:	2b01      	cmp	r3, #1
 8006136:	d119      	bne.n	800616c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	330c      	adds	r3, #12
 800613e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	60fb      	str	r3, [r7, #12]
   return(result);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0310 	bic.w	r3, r3, #16
 800614e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006158:	61fa      	str	r2, [r7, #28]
 800615a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	69b9      	ldr	r1, [r7, #24]
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	617b      	str	r3, [r7, #20]
   return(result);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e5      	bne.n	8006138 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616e:	2200      	movs	r2, #0
 8006170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	2b01      	cmp	r3, #1
 8006178:	d106      	bne.n	8006188 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800617a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800617e:	4619      	mov	r1, r3
 8006180:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006182:	f7ff ff0b 	bl	8005f9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006186:	e002      	b.n	800618e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006188:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800618a:	f7fb ffe1 	bl	8002150 <HAL_UART_RxCpltCallback>
}
 800618e:	bf00      	nop
 8006190:	3770      	adds	r7, #112	; 0x70
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d108      	bne.n	80061c4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061b6:	085b      	lsrs	r3, r3, #1
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	4619      	mov	r1, r3
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff feed 	bl	8005f9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061c2:	e002      	b.n	80061ca <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff fed5 	bl	8005f74 <HAL_UART_RxHalfCpltCallback>
}
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ee:	2b80      	cmp	r3, #128	; 0x80
 80061f0:	bf0c      	ite	eq
 80061f2:	2301      	moveq	r3, #1
 80061f4:	2300      	movne	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b21      	cmp	r3, #33	; 0x21
 8006204:	d108      	bne.n	8006218 <UART_DMAError+0x46>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2200      	movs	r2, #0
 8006210:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006212:	68b8      	ldr	r0, [r7, #8]
 8006214:	f000 f8c2 	bl	800639c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006222:	2b40      	cmp	r3, #64	; 0x40
 8006224:	bf0c      	ite	eq
 8006226:	2301      	moveq	r3, #1
 8006228:	2300      	movne	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b22      	cmp	r3, #34	; 0x22
 8006238:	d108      	bne.n	800624c <UART_DMAError+0x7a>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006246:	68b8      	ldr	r0, [r7, #8]
 8006248:	f000 f8d0 	bl	80063ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006250:	f043 0210 	orr.w	r2, r3, #16
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006258:	68b8      	ldr	r0, [r7, #8]
 800625a:	f7ff fe95 	bl	8005f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b098      	sub	sp, #96	; 0x60
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	88fa      	ldrh	r2, [r7, #6]
 8006280:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2222      	movs	r2, #34	; 0x22
 800628c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006294:	4a3e      	ldr	r2, [pc, #248]	; (8006390 <UART_Start_Receive_DMA+0x128>)
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629c:	4a3d      	ldr	r2, [pc, #244]	; (8006394 <UART_Start_Receive_DMA+0x12c>)
 800629e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a4:	4a3c      	ldr	r2, [pc, #240]	; (8006398 <UART_Start_Receive_DMA+0x130>)
 80062a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ac:	2200      	movs	r2, #0
 80062ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80062b0:	f107 0308 	add.w	r3, r7, #8
 80062b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3304      	adds	r3, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	f7fc ff46 	bl	8003158 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80062cc:	2300      	movs	r3, #0
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d019      	beq.n	800631e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006300:	65bb      	str	r3, [r7, #88]	; 0x58
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800630a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800630c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e5      	bne.n	80062ea <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3314      	adds	r3, #20
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	f043 0301 	orr.w	r3, r3, #1
 8006334:	657b      	str	r3, [r7, #84]	; 0x54
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3314      	adds	r3, #20
 800633c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800633e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e5      	bne.n	800631e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3314      	adds	r3, #20
 8006358:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	617b      	str	r3, [r7, #20]
   return(result);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006368:	653b      	str	r3, [r7, #80]	; 0x50
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3314      	adds	r3, #20
 8006370:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006372:	627a      	str	r2, [r7, #36]	; 0x24
 8006374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	6a39      	ldr	r1, [r7, #32]
 8006378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e5      	bne.n	8006352 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3760      	adds	r7, #96	; 0x60
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	0800606b 	.word	0x0800606b
 8006394:	08006197 	.word	0x08006197
 8006398:	080061d3 	.word	0x080061d3

0800639c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b089      	sub	sp, #36	; 0x24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	330c      	adds	r3, #12
 80063c2:	69fa      	ldr	r2, [r7, #28]
 80063c4:	61ba      	str	r2, [r7, #24]
 80063c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6979      	ldr	r1, [r7, #20]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	613b      	str	r3, [r7, #16]
   return(result);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e5      	bne.n	80063a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80063e0:	bf00      	nop
 80063e2:	3724      	adds	r7, #36	; 0x24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b095      	sub	sp, #84	; 0x54
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800640a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006414:	643a      	str	r2, [r7, #64]	; 0x40
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800641a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e5      	bne.n	80063f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3314      	adds	r3, #20
 800642e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	61fb      	str	r3, [r7, #28]
   return(result);
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3314      	adds	r3, #20
 8006446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800644a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800644e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e5      	bne.n	8006428 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	2b01      	cmp	r3, #1
 8006462:	d119      	bne.n	8006498 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	330c      	adds	r3, #12
 800646a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	60bb      	str	r3, [r7, #8]
   return(result);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f023 0310 	bic.w	r3, r3, #16
 800647a:	647b      	str	r3, [r7, #68]	; 0x44
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	330c      	adds	r3, #12
 8006482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006484:	61ba      	str	r2, [r7, #24]
 8006486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6979      	ldr	r1, [r7, #20]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	613b      	str	r3, [r7, #16]
   return(result);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e5      	bne.n	8006464 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064a6:	bf00      	nop
 80064a8:	3754      	adds	r7, #84	; 0x54
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7ff fd5b 	bl	8005f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064da:	b480      	push	{r7}
 80064dc:	b085      	sub	sp, #20
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b21      	cmp	r3, #33	; 0x21
 80064ec:	d13e      	bne.n	800656c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f6:	d114      	bne.n	8006522 <UART_Transmit_IT+0x48>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d110      	bne.n	8006522 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006514:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	1c9a      	adds	r2, r3, #2
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	621a      	str	r2, [r3, #32]
 8006520:	e008      	b.n	8006534 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	1c59      	adds	r1, r3, #1
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6211      	str	r1, [r2, #32]
 800652c:	781a      	ldrb	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29b      	uxth	r3, r3
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	4619      	mov	r1, r3
 8006542:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10f      	bne.n	8006568 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006556:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006566:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	e000      	b.n	800656e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800656c:	2302      	movs	r3, #2
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006590:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2220      	movs	r2, #32
 8006596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fb fdc6 	bl	800212c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b08c      	sub	sp, #48	; 0x30
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b22      	cmp	r3, #34	; 0x22
 80065bc:	f040 80ae 	bne.w	800671c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c8:	d117      	bne.n	80065fa <UART_Receive_IT+0x50>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d113      	bne.n	80065fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	1c9a      	adds	r2, r3, #2
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	629a      	str	r2, [r3, #40]	; 0x28
 80065f8:	e026      	b.n	8006648 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006600:	2300      	movs	r3, #0
 8006602:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660c:	d007      	beq.n	800661e <UART_Receive_IT+0x74>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10a      	bne.n	800662c <UART_Receive_IT+0x82>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	b2da      	uxtb	r2, r3
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e008      	b.n	800663e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006638:	b2da      	uxtb	r2, r3
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29b      	uxth	r3, r3
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	4619      	mov	r1, r3
 8006656:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006658:	2b00      	cmp	r3, #0
 800665a:	d15d      	bne.n	8006718 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0220 	bic.w	r2, r2, #32
 800666a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800667a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0201 	bic.w	r2, r2, #1
 800668a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d135      	bne.n	800670e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	330c      	adds	r3, #12
 80066ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	613b      	str	r3, [r7, #16]
   return(result);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f023 0310 	bic.w	r3, r3, #16
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c8:	623a      	str	r2, [r7, #32]
 80066ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	69f9      	ldr	r1, [r7, #28]
 80066ce:	6a3a      	ldr	r2, [r7, #32]
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e5      	bne.n	80066a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	2b10      	cmp	r3, #16
 80066e8:	d10a      	bne.n	8006700 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff fc48 	bl	8005f9c <HAL_UARTEx_RxEventCallback>
 800670c:	e002      	b.n	8006714 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fb fd1e 	bl	8002150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	e002      	b.n	800671e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	e000      	b.n	800671e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800671c:	2302      	movs	r3, #2
  }
}
 800671e:	4618      	mov	r0, r3
 8006720:	3730      	adds	r7, #48	; 0x30
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800672c:	b0c0      	sub	sp, #256	; 0x100
 800672e:	af00      	add	r7, sp, #0
 8006730:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006744:	68d9      	ldr	r1, [r3, #12]
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	ea40 0301 	orr.w	r3, r0, r1
 8006750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	431a      	orrs	r2, r3
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	431a      	orrs	r2, r3
 8006768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006780:	f021 010c 	bic.w	r1, r1, #12
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800678e:	430b      	orrs	r3, r1
 8006790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800679e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a2:	6999      	ldr	r1, [r3, #24]
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	ea40 0301 	orr.w	r3, r0, r1
 80067ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4b8f      	ldr	r3, [pc, #572]	; (80069f4 <UART_SetConfig+0x2cc>)
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d005      	beq.n	80067c8 <UART_SetConfig+0xa0>
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b8d      	ldr	r3, [pc, #564]	; (80069f8 <UART_SetConfig+0x2d0>)
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d104      	bne.n	80067d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067c8:	f7fd fae8 	bl	8003d9c <HAL_RCC_GetPCLK2Freq>
 80067cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80067d0:	e003      	b.n	80067da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067d2:	f7fd facf 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 80067d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e4:	f040 810c 	bne.w	8006a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80067fa:	4622      	mov	r2, r4
 80067fc:	462b      	mov	r3, r5
 80067fe:	1891      	adds	r1, r2, r2
 8006800:	65b9      	str	r1, [r7, #88]	; 0x58
 8006802:	415b      	adcs	r3, r3
 8006804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800680a:	4621      	mov	r1, r4
 800680c:	eb12 0801 	adds.w	r8, r2, r1
 8006810:	4629      	mov	r1, r5
 8006812:	eb43 0901 	adc.w	r9, r3, r1
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800682a:	4690      	mov	r8, r2
 800682c:	4699      	mov	r9, r3
 800682e:	4623      	mov	r3, r4
 8006830:	eb18 0303 	adds.w	r3, r8, r3
 8006834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006838:	462b      	mov	r3, r5
 800683a:	eb49 0303 	adc.w	r3, r9, r3
 800683e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800684e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006856:	460b      	mov	r3, r1
 8006858:	18db      	adds	r3, r3, r3
 800685a:	653b      	str	r3, [r7, #80]	; 0x50
 800685c:	4613      	mov	r3, r2
 800685e:	eb42 0303 	adc.w	r3, r2, r3
 8006862:	657b      	str	r3, [r7, #84]	; 0x54
 8006864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800686c:	f7f9 fcd2 	bl	8000214 <__aeabi_uldivmod>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	4b61      	ldr	r3, [pc, #388]	; (80069fc <UART_SetConfig+0x2d4>)
 8006876:	fba3 2302 	umull	r2, r3, r3, r2
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	011c      	lsls	r4, r3, #4
 800687e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006882:	2200      	movs	r2, #0
 8006884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006888:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800688c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006890:	4642      	mov	r2, r8
 8006892:	464b      	mov	r3, r9
 8006894:	1891      	adds	r1, r2, r2
 8006896:	64b9      	str	r1, [r7, #72]	; 0x48
 8006898:	415b      	adcs	r3, r3
 800689a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800689c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068a0:	4641      	mov	r1, r8
 80068a2:	eb12 0a01 	adds.w	sl, r2, r1
 80068a6:	4649      	mov	r1, r9
 80068a8:	eb43 0b01 	adc.w	fp, r3, r1
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	f04f 0300 	mov.w	r3, #0
 80068b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068c0:	4692      	mov	sl, r2
 80068c2:	469b      	mov	fp, r3
 80068c4:	4643      	mov	r3, r8
 80068c6:	eb1a 0303 	adds.w	r3, sl, r3
 80068ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068ce:	464b      	mov	r3, r9
 80068d0:	eb4b 0303 	adc.w	r3, fp, r3
 80068d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068ec:	460b      	mov	r3, r1
 80068ee:	18db      	adds	r3, r3, r3
 80068f0:	643b      	str	r3, [r7, #64]	; 0x40
 80068f2:	4613      	mov	r3, r2
 80068f4:	eb42 0303 	adc.w	r3, r2, r3
 80068f8:	647b      	str	r3, [r7, #68]	; 0x44
 80068fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006902:	f7f9 fc87 	bl	8000214 <__aeabi_uldivmod>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4611      	mov	r1, r2
 800690c:	4b3b      	ldr	r3, [pc, #236]	; (80069fc <UART_SetConfig+0x2d4>)
 800690e:	fba3 2301 	umull	r2, r3, r3, r1
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	2264      	movs	r2, #100	; 0x64
 8006916:	fb02 f303 	mul.w	r3, r2, r3
 800691a:	1acb      	subs	r3, r1, r3
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006922:	4b36      	ldr	r3, [pc, #216]	; (80069fc <UART_SetConfig+0x2d4>)
 8006924:	fba3 2302 	umull	r2, r3, r3, r2
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006930:	441c      	add	r4, r3
 8006932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006936:	2200      	movs	r2, #0
 8006938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800693c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006944:	4642      	mov	r2, r8
 8006946:	464b      	mov	r3, r9
 8006948:	1891      	adds	r1, r2, r2
 800694a:	63b9      	str	r1, [r7, #56]	; 0x38
 800694c:	415b      	adcs	r3, r3
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006954:	4641      	mov	r1, r8
 8006956:	1851      	adds	r1, r2, r1
 8006958:	6339      	str	r1, [r7, #48]	; 0x30
 800695a:	4649      	mov	r1, r9
 800695c:	414b      	adcs	r3, r1
 800695e:	637b      	str	r3, [r7, #52]	; 0x34
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800696c:	4659      	mov	r1, fp
 800696e:	00cb      	lsls	r3, r1, #3
 8006970:	4651      	mov	r1, sl
 8006972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006976:	4651      	mov	r1, sl
 8006978:	00ca      	lsls	r2, r1, #3
 800697a:	4610      	mov	r0, r2
 800697c:	4619      	mov	r1, r3
 800697e:	4603      	mov	r3, r0
 8006980:	4642      	mov	r2, r8
 8006982:	189b      	adds	r3, r3, r2
 8006984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006988:	464b      	mov	r3, r9
 800698a:	460a      	mov	r2, r1
 800698c:	eb42 0303 	adc.w	r3, r2, r3
 8006990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069a8:	460b      	mov	r3, r1
 80069aa:	18db      	adds	r3, r3, r3
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ae:	4613      	mov	r3, r2
 80069b0:	eb42 0303 	adc.w	r3, r2, r3
 80069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069be:	f7f9 fc29 	bl	8000214 <__aeabi_uldivmod>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <UART_SetConfig+0x2d4>)
 80069c8:	fba3 1302 	umull	r1, r3, r3, r2
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	2164      	movs	r1, #100	; 0x64
 80069d0:	fb01 f303 	mul.w	r3, r1, r3
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	3332      	adds	r3, #50	; 0x32
 80069da:	4a08      	ldr	r2, [pc, #32]	; (80069fc <UART_SetConfig+0x2d4>)
 80069dc:	fba2 2303 	umull	r2, r3, r2, r3
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	f003 0207 	and.w	r2, r3, #7
 80069e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4422      	add	r2, r4
 80069ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069f0:	e106      	b.n	8006c00 <UART_SetConfig+0x4d8>
 80069f2:	bf00      	nop
 80069f4:	40011000 	.word	0x40011000
 80069f8:	40011400 	.word	0x40011400
 80069fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a04:	2200      	movs	r2, #0
 8006a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a12:	4642      	mov	r2, r8
 8006a14:	464b      	mov	r3, r9
 8006a16:	1891      	adds	r1, r2, r2
 8006a18:	6239      	str	r1, [r7, #32]
 8006a1a:	415b      	adcs	r3, r3
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a22:	4641      	mov	r1, r8
 8006a24:	1854      	adds	r4, r2, r1
 8006a26:	4649      	mov	r1, r9
 8006a28:	eb43 0501 	adc.w	r5, r3, r1
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	00eb      	lsls	r3, r5, #3
 8006a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a3a:	00e2      	lsls	r2, r4, #3
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	461d      	mov	r5, r3
 8006a40:	4643      	mov	r3, r8
 8006a42:	18e3      	adds	r3, r4, r3
 8006a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a48:	464b      	mov	r3, r9
 8006a4a:	eb45 0303 	adc.w	r3, r5, r3
 8006a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	f04f 0300 	mov.w	r3, #0
 8006a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a6e:	4629      	mov	r1, r5
 8006a70:	008b      	lsls	r3, r1, #2
 8006a72:	4621      	mov	r1, r4
 8006a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a78:	4621      	mov	r1, r4
 8006a7a:	008a      	lsls	r2, r1, #2
 8006a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a80:	f7f9 fbc8 	bl	8000214 <__aeabi_uldivmod>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4b60      	ldr	r3, [pc, #384]	; (8006c0c <UART_SetConfig+0x4e4>)
 8006a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	011c      	lsls	r4, r3, #4
 8006a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	1891      	adds	r1, r2, r2
 8006aaa:	61b9      	str	r1, [r7, #24]
 8006aac:	415b      	adcs	r3, r3
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ab4:	4641      	mov	r1, r8
 8006ab6:	1851      	adds	r1, r2, r1
 8006ab8:	6139      	str	r1, [r7, #16]
 8006aba:	4649      	mov	r1, r9
 8006abc:	414b      	adcs	r3, r1
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006acc:	4659      	mov	r1, fp
 8006ace:	00cb      	lsls	r3, r1, #3
 8006ad0:	4651      	mov	r1, sl
 8006ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ad6:	4651      	mov	r1, sl
 8006ad8:	00ca      	lsls	r2, r1, #3
 8006ada:	4610      	mov	r0, r2
 8006adc:	4619      	mov	r1, r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4642      	mov	r2, r8
 8006ae2:	189b      	adds	r3, r3, r2
 8006ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ae8:	464b      	mov	r3, r9
 8006aea:	460a      	mov	r2, r1
 8006aec:	eb42 0303 	adc.w	r3, r2, r3
 8006af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006afe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	f04f 0300 	mov.w	r3, #0
 8006b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	008b      	lsls	r3, r1, #2
 8006b10:	4641      	mov	r1, r8
 8006b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b16:	4641      	mov	r1, r8
 8006b18:	008a      	lsls	r2, r1, #2
 8006b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b1e:	f7f9 fb79 	bl	8000214 <__aeabi_uldivmod>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	4611      	mov	r1, r2
 8006b28:	4b38      	ldr	r3, [pc, #224]	; (8006c0c <UART_SetConfig+0x4e4>)
 8006b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	2264      	movs	r2, #100	; 0x64
 8006b32:	fb02 f303 	mul.w	r3, r2, r3
 8006b36:	1acb      	subs	r3, r1, r3
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	3332      	adds	r3, #50	; 0x32
 8006b3c:	4a33      	ldr	r2, [pc, #204]	; (8006c0c <UART_SetConfig+0x4e4>)
 8006b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b48:	441c      	add	r4, r3
 8006b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b4e:	2200      	movs	r2, #0
 8006b50:	673b      	str	r3, [r7, #112]	; 0x70
 8006b52:	677a      	str	r2, [r7, #116]	; 0x74
 8006b54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b58:	4642      	mov	r2, r8
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	1891      	adds	r1, r2, r2
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	415b      	adcs	r3, r3
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b68:	4641      	mov	r1, r8
 8006b6a:	1851      	adds	r1, r2, r1
 8006b6c:	6039      	str	r1, [r7, #0]
 8006b6e:	4649      	mov	r1, r9
 8006b70:	414b      	adcs	r3, r1
 8006b72:	607b      	str	r3, [r7, #4]
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b80:	4659      	mov	r1, fp
 8006b82:	00cb      	lsls	r3, r1, #3
 8006b84:	4651      	mov	r1, sl
 8006b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b8a:	4651      	mov	r1, sl
 8006b8c:	00ca      	lsls	r2, r1, #3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	4619      	mov	r1, r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	4642      	mov	r2, r8
 8006b96:	189b      	adds	r3, r3, r2
 8006b98:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	eb42 0303 	adc.w	r3, r2, r3
 8006ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	663b      	str	r3, [r7, #96]	; 0x60
 8006bae:	667a      	str	r2, [r7, #100]	; 0x64
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	008b      	lsls	r3, r1, #2
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	008a      	lsls	r2, r1, #2
 8006bca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006bce:	f7f9 fb21 	bl	8000214 <__aeabi_uldivmod>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <UART_SetConfig+0x4e4>)
 8006bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bdc:	095b      	lsrs	r3, r3, #5
 8006bde:	2164      	movs	r1, #100	; 0x64
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	3332      	adds	r3, #50	; 0x32
 8006bea:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <UART_SetConfig+0x4e4>)
 8006bec:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf0:	095b      	lsrs	r3, r3, #5
 8006bf2:	f003 020f 	and.w	r2, r3, #15
 8006bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4422      	add	r2, r4
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	bf00      	nop
 8006c02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c06:	46bd      	mov	sp, r7
 8006c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c0c:	51eb851f 	.word	0x51eb851f

08006c10 <realloc>:
 8006c10:	4b02      	ldr	r3, [pc, #8]	; (8006c1c <realloc+0xc>)
 8006c12:	460a      	mov	r2, r1
 8006c14:	4601      	mov	r1, r0
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	f000 b802 	b.w	8006c20 <_realloc_r>
 8006c1c:	20000068 	.word	0x20000068

08006c20 <_realloc_r>:
 8006c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c24:	4680      	mov	r8, r0
 8006c26:	4614      	mov	r4, r2
 8006c28:	460e      	mov	r6, r1
 8006c2a:	b921      	cbnz	r1, 8006c36 <_realloc_r+0x16>
 8006c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c30:	4611      	mov	r1, r2
 8006c32:	f000 b8d3 	b.w	8006ddc <_malloc_r>
 8006c36:	b92a      	cbnz	r2, 8006c44 <_realloc_r+0x24>
 8006c38:	f000 f864 	bl	8006d04 <_free_r>
 8006c3c:	4625      	mov	r5, r4
 8006c3e:	4628      	mov	r0, r5
 8006c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c44:	f000 f956 	bl	8006ef4 <_malloc_usable_size_r>
 8006c48:	4284      	cmp	r4, r0
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	d802      	bhi.n	8006c54 <_realloc_r+0x34>
 8006c4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c52:	d812      	bhi.n	8006c7a <_realloc_r+0x5a>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4640      	mov	r0, r8
 8006c58:	f000 f8c0 	bl	8006ddc <_malloc_r>
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d0ed      	beq.n	8006c3e <_realloc_r+0x1e>
 8006c62:	42bc      	cmp	r4, r7
 8006c64:	4622      	mov	r2, r4
 8006c66:	4631      	mov	r1, r6
 8006c68:	bf28      	it	cs
 8006c6a:	463a      	movcs	r2, r7
 8006c6c:	f000 f83c 	bl	8006ce8 <memcpy>
 8006c70:	4631      	mov	r1, r6
 8006c72:	4640      	mov	r0, r8
 8006c74:	f000 f846 	bl	8006d04 <_free_r>
 8006c78:	e7e1      	b.n	8006c3e <_realloc_r+0x1e>
 8006c7a:	4635      	mov	r5, r6
 8006c7c:	e7df      	b.n	8006c3e <_realloc_r+0x1e>

08006c7e <memset>:
 8006c7e:	4402      	add	r2, r0
 8006c80:	4603      	mov	r3, r0
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d100      	bne.n	8006c88 <memset+0xa>
 8006c86:	4770      	bx	lr
 8006c88:	f803 1b01 	strb.w	r1, [r3], #1
 8006c8c:	e7f9      	b.n	8006c82 <memset+0x4>
	...

08006c90 <__errno>:
 8006c90:	4b01      	ldr	r3, [pc, #4]	; (8006c98 <__errno+0x8>)
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	20000068 	.word	0x20000068

08006c9c <__libc_init_array>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	4d0d      	ldr	r5, [pc, #52]	; (8006cd4 <__libc_init_array+0x38>)
 8006ca0:	4c0d      	ldr	r4, [pc, #52]	; (8006cd8 <__libc_init_array+0x3c>)
 8006ca2:	1b64      	subs	r4, r4, r5
 8006ca4:	10a4      	asrs	r4, r4, #2
 8006ca6:	2600      	movs	r6, #0
 8006ca8:	42a6      	cmp	r6, r4
 8006caa:	d109      	bne.n	8006cc0 <__libc_init_array+0x24>
 8006cac:	4d0b      	ldr	r5, [pc, #44]	; (8006cdc <__libc_init_array+0x40>)
 8006cae:	4c0c      	ldr	r4, [pc, #48]	; (8006ce0 <__libc_init_array+0x44>)
 8006cb0:	f000 f938 	bl	8006f24 <_init>
 8006cb4:	1b64      	subs	r4, r4, r5
 8006cb6:	10a4      	asrs	r4, r4, #2
 8006cb8:	2600      	movs	r6, #0
 8006cba:	42a6      	cmp	r6, r4
 8006cbc:	d105      	bne.n	8006cca <__libc_init_array+0x2e>
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
 8006cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc4:	4798      	blx	r3
 8006cc6:	3601      	adds	r6, #1
 8006cc8:	e7ee      	b.n	8006ca8 <__libc_init_array+0xc>
 8006cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cce:	4798      	blx	r3
 8006cd0:	3601      	adds	r6, #1
 8006cd2:	e7f2      	b.n	8006cba <__libc_init_array+0x1e>
 8006cd4:	08007184 	.word	0x08007184
 8006cd8:	08007184 	.word	0x08007184
 8006cdc:	08007184 	.word	0x08007184
 8006ce0:	0800718c 	.word	0x0800718c

08006ce4 <__retarget_lock_acquire_recursive>:
 8006ce4:	4770      	bx	lr

08006ce6 <__retarget_lock_release_recursive>:
 8006ce6:	4770      	bx	lr

08006ce8 <memcpy>:
 8006ce8:	440a      	add	r2, r1
 8006cea:	4291      	cmp	r1, r2
 8006cec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006cf0:	d100      	bne.n	8006cf4 <memcpy+0xc>
 8006cf2:	4770      	bx	lr
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cfe:	4291      	cmp	r1, r2
 8006d00:	d1f9      	bne.n	8006cf6 <memcpy+0xe>
 8006d02:	bd10      	pop	{r4, pc}

08006d04 <_free_r>:
 8006d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d06:	2900      	cmp	r1, #0
 8006d08:	d044      	beq.n	8006d94 <_free_r+0x90>
 8006d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d0e:	9001      	str	r0, [sp, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f1a1 0404 	sub.w	r4, r1, #4
 8006d16:	bfb8      	it	lt
 8006d18:	18e4      	addlt	r4, r4, r3
 8006d1a:	f000 f8df 	bl	8006edc <__malloc_lock>
 8006d1e:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <_free_r+0x94>)
 8006d20:	9801      	ldr	r0, [sp, #4]
 8006d22:	6813      	ldr	r3, [r2, #0]
 8006d24:	b933      	cbnz	r3, 8006d34 <_free_r+0x30>
 8006d26:	6063      	str	r3, [r4, #4]
 8006d28:	6014      	str	r4, [r2, #0]
 8006d2a:	b003      	add	sp, #12
 8006d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d30:	f000 b8da 	b.w	8006ee8 <__malloc_unlock>
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	d908      	bls.n	8006d4a <_free_r+0x46>
 8006d38:	6825      	ldr	r5, [r4, #0]
 8006d3a:	1961      	adds	r1, r4, r5
 8006d3c:	428b      	cmp	r3, r1
 8006d3e:	bf01      	itttt	eq
 8006d40:	6819      	ldreq	r1, [r3, #0]
 8006d42:	685b      	ldreq	r3, [r3, #4]
 8006d44:	1949      	addeq	r1, r1, r5
 8006d46:	6021      	streq	r1, [r4, #0]
 8006d48:	e7ed      	b.n	8006d26 <_free_r+0x22>
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	b10b      	cbz	r3, 8006d54 <_free_r+0x50>
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	d9fa      	bls.n	8006d4a <_free_r+0x46>
 8006d54:	6811      	ldr	r1, [r2, #0]
 8006d56:	1855      	adds	r5, r2, r1
 8006d58:	42a5      	cmp	r5, r4
 8006d5a:	d10b      	bne.n	8006d74 <_free_r+0x70>
 8006d5c:	6824      	ldr	r4, [r4, #0]
 8006d5e:	4421      	add	r1, r4
 8006d60:	1854      	adds	r4, r2, r1
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	6011      	str	r1, [r2, #0]
 8006d66:	d1e0      	bne.n	8006d2a <_free_r+0x26>
 8006d68:	681c      	ldr	r4, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	6053      	str	r3, [r2, #4]
 8006d6e:	440c      	add	r4, r1
 8006d70:	6014      	str	r4, [r2, #0]
 8006d72:	e7da      	b.n	8006d2a <_free_r+0x26>
 8006d74:	d902      	bls.n	8006d7c <_free_r+0x78>
 8006d76:	230c      	movs	r3, #12
 8006d78:	6003      	str	r3, [r0, #0]
 8006d7a:	e7d6      	b.n	8006d2a <_free_r+0x26>
 8006d7c:	6825      	ldr	r5, [r4, #0]
 8006d7e:	1961      	adds	r1, r4, r5
 8006d80:	428b      	cmp	r3, r1
 8006d82:	bf04      	itt	eq
 8006d84:	6819      	ldreq	r1, [r3, #0]
 8006d86:	685b      	ldreq	r3, [r3, #4]
 8006d88:	6063      	str	r3, [r4, #4]
 8006d8a:	bf04      	itt	eq
 8006d8c:	1949      	addeq	r1, r1, r5
 8006d8e:	6021      	streq	r1, [r4, #0]
 8006d90:	6054      	str	r4, [r2, #4]
 8006d92:	e7ca      	b.n	8006d2a <_free_r+0x26>
 8006d94:	b003      	add	sp, #12
 8006d96:	bd30      	pop	{r4, r5, pc}
 8006d98:	20000d54 	.word	0x20000d54

08006d9c <sbrk_aligned>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	4e0e      	ldr	r6, [pc, #56]	; (8006dd8 <sbrk_aligned+0x3c>)
 8006da0:	460c      	mov	r4, r1
 8006da2:	6831      	ldr	r1, [r6, #0]
 8006da4:	4605      	mov	r5, r0
 8006da6:	b911      	cbnz	r1, 8006dae <sbrk_aligned+0x12>
 8006da8:	f000 f8ac 	bl	8006f04 <_sbrk_r>
 8006dac:	6030      	str	r0, [r6, #0]
 8006dae:	4621      	mov	r1, r4
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 f8a7 	bl	8006f04 <_sbrk_r>
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	d00a      	beq.n	8006dd0 <sbrk_aligned+0x34>
 8006dba:	1cc4      	adds	r4, r0, #3
 8006dbc:	f024 0403 	bic.w	r4, r4, #3
 8006dc0:	42a0      	cmp	r0, r4
 8006dc2:	d007      	beq.n	8006dd4 <sbrk_aligned+0x38>
 8006dc4:	1a21      	subs	r1, r4, r0
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 f89c 	bl	8006f04 <_sbrk_r>
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d101      	bne.n	8006dd4 <sbrk_aligned+0x38>
 8006dd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	20000d58 	.word	0x20000d58

08006ddc <_malloc_r>:
 8006ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	1ccd      	adds	r5, r1, #3
 8006de2:	f025 0503 	bic.w	r5, r5, #3
 8006de6:	3508      	adds	r5, #8
 8006de8:	2d0c      	cmp	r5, #12
 8006dea:	bf38      	it	cc
 8006dec:	250c      	movcc	r5, #12
 8006dee:	2d00      	cmp	r5, #0
 8006df0:	4607      	mov	r7, r0
 8006df2:	db01      	blt.n	8006df8 <_malloc_r+0x1c>
 8006df4:	42a9      	cmp	r1, r5
 8006df6:	d905      	bls.n	8006e04 <_malloc_r+0x28>
 8006df8:	230c      	movs	r3, #12
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	2600      	movs	r6, #0
 8006dfe:	4630      	mov	r0, r6
 8006e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ed8 <_malloc_r+0xfc>
 8006e08:	f000 f868 	bl	8006edc <__malloc_lock>
 8006e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e10:	461c      	mov	r4, r3
 8006e12:	bb5c      	cbnz	r4, 8006e6c <_malloc_r+0x90>
 8006e14:	4629      	mov	r1, r5
 8006e16:	4638      	mov	r0, r7
 8006e18:	f7ff ffc0 	bl	8006d9c <sbrk_aligned>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	4604      	mov	r4, r0
 8006e20:	d155      	bne.n	8006ece <_malloc_r+0xf2>
 8006e22:	f8d8 4000 	ldr.w	r4, [r8]
 8006e26:	4626      	mov	r6, r4
 8006e28:	2e00      	cmp	r6, #0
 8006e2a:	d145      	bne.n	8006eb8 <_malloc_r+0xdc>
 8006e2c:	2c00      	cmp	r4, #0
 8006e2e:	d048      	beq.n	8006ec2 <_malloc_r+0xe6>
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	4631      	mov	r1, r6
 8006e34:	4638      	mov	r0, r7
 8006e36:	eb04 0903 	add.w	r9, r4, r3
 8006e3a:	f000 f863 	bl	8006f04 <_sbrk_r>
 8006e3e:	4581      	cmp	r9, r0
 8006e40:	d13f      	bne.n	8006ec2 <_malloc_r+0xe6>
 8006e42:	6821      	ldr	r1, [r4, #0]
 8006e44:	1a6d      	subs	r5, r5, r1
 8006e46:	4629      	mov	r1, r5
 8006e48:	4638      	mov	r0, r7
 8006e4a:	f7ff ffa7 	bl	8006d9c <sbrk_aligned>
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d037      	beq.n	8006ec2 <_malloc_r+0xe6>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	442b      	add	r3, r5
 8006e56:	6023      	str	r3, [r4, #0]
 8006e58:	f8d8 3000 	ldr.w	r3, [r8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d038      	beq.n	8006ed2 <_malloc_r+0xf6>
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	42a2      	cmp	r2, r4
 8006e64:	d12b      	bne.n	8006ebe <_malloc_r+0xe2>
 8006e66:	2200      	movs	r2, #0
 8006e68:	605a      	str	r2, [r3, #4]
 8006e6a:	e00f      	b.n	8006e8c <_malloc_r+0xb0>
 8006e6c:	6822      	ldr	r2, [r4, #0]
 8006e6e:	1b52      	subs	r2, r2, r5
 8006e70:	d41f      	bmi.n	8006eb2 <_malloc_r+0xd6>
 8006e72:	2a0b      	cmp	r2, #11
 8006e74:	d917      	bls.n	8006ea6 <_malloc_r+0xca>
 8006e76:	1961      	adds	r1, r4, r5
 8006e78:	42a3      	cmp	r3, r4
 8006e7a:	6025      	str	r5, [r4, #0]
 8006e7c:	bf18      	it	ne
 8006e7e:	6059      	strne	r1, [r3, #4]
 8006e80:	6863      	ldr	r3, [r4, #4]
 8006e82:	bf08      	it	eq
 8006e84:	f8c8 1000 	streq.w	r1, [r8]
 8006e88:	5162      	str	r2, [r4, r5]
 8006e8a:	604b      	str	r3, [r1, #4]
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	f104 060b 	add.w	r6, r4, #11
 8006e92:	f000 f829 	bl	8006ee8 <__malloc_unlock>
 8006e96:	f026 0607 	bic.w	r6, r6, #7
 8006e9a:	1d23      	adds	r3, r4, #4
 8006e9c:	1af2      	subs	r2, r6, r3
 8006e9e:	d0ae      	beq.n	8006dfe <_malloc_r+0x22>
 8006ea0:	1b9b      	subs	r3, r3, r6
 8006ea2:	50a3      	str	r3, [r4, r2]
 8006ea4:	e7ab      	b.n	8006dfe <_malloc_r+0x22>
 8006ea6:	42a3      	cmp	r3, r4
 8006ea8:	6862      	ldr	r2, [r4, #4]
 8006eaa:	d1dd      	bne.n	8006e68 <_malloc_r+0x8c>
 8006eac:	f8c8 2000 	str.w	r2, [r8]
 8006eb0:	e7ec      	b.n	8006e8c <_malloc_r+0xb0>
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	6864      	ldr	r4, [r4, #4]
 8006eb6:	e7ac      	b.n	8006e12 <_malloc_r+0x36>
 8006eb8:	4634      	mov	r4, r6
 8006eba:	6876      	ldr	r6, [r6, #4]
 8006ebc:	e7b4      	b.n	8006e28 <_malloc_r+0x4c>
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	e7cc      	b.n	8006e5c <_malloc_r+0x80>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	f000 f80e 	bl	8006ee8 <__malloc_unlock>
 8006ecc:	e797      	b.n	8006dfe <_malloc_r+0x22>
 8006ece:	6025      	str	r5, [r4, #0]
 8006ed0:	e7dc      	b.n	8006e8c <_malloc_r+0xb0>
 8006ed2:	605b      	str	r3, [r3, #4]
 8006ed4:	deff      	udf	#255	; 0xff
 8006ed6:	bf00      	nop
 8006ed8:	20000d54 	.word	0x20000d54

08006edc <__malloc_lock>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__malloc_lock+0x8>)
 8006ede:	f7ff bf01 	b.w	8006ce4 <__retarget_lock_acquire_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	20000d50 	.word	0x20000d50

08006ee8 <__malloc_unlock>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__malloc_unlock+0x8>)
 8006eea:	f7ff befc 	b.w	8006ce6 <__retarget_lock_release_recursive>
 8006eee:	bf00      	nop
 8006ef0:	20000d50 	.word	0x20000d50

08006ef4 <_malloc_usable_size_r>:
 8006ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef8:	1f18      	subs	r0, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bfbc      	itt	lt
 8006efe:	580b      	ldrlt	r3, [r1, r0]
 8006f00:	18c0      	addlt	r0, r0, r3
 8006f02:	4770      	bx	lr

08006f04 <_sbrk_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d06      	ldr	r5, [pc, #24]	; (8006f20 <_sbrk_r+0x1c>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	602b      	str	r3, [r5, #0]
 8006f10:	f7fb fe5a 	bl	8002bc8 <_sbrk>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_sbrk_r+0x1a>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_sbrk_r+0x1a>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	20000d4c 	.word	0x20000d4c

08006f24 <_init>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	bf00      	nop
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr

08006f30 <_fini>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr
